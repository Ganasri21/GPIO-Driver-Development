/*
 * stm32f407xx_gpio_driver.h
 *
 *  Created on: Nov 15, 2024
 *      Author: ganasri.s
 */

#ifndef STM32F407XX_GPIO_DRIVER_H_
#define STM32F407XX_GPIO_DRIVER_H_

#include "stm32f407xx.h"

typedef struct
{
	// uint8 - Used to store an 8 bit value & Pin number ranges from 0 to 15
	uint8_t GPIO_PinNumber;         // GPIO Pin Number
	uint8_t GPIO_PinMode;           // GPIO Pin Mode
	uint8_t GPIO_PinSpeed;          // GPIO Speed
	uint8_t GPIO_PinPuPdControl;    // GPIO Output Type
	uint8_t GPIO_PinOPType;         // GPIO Pullup-Pulldown
	uint8_t GPIO_PinAltFunMode;     // GPIO Alt.fun Mode
}GPIO_PinConfig_t;

/*
 * This is the Handle structure for GPIO pin
 * A handle structure is a data structure that holds
 * the runtime information of a peripheral, such as current state,
 * error status, or data buffers. It serves as a "handle" or reference
 * to access a peripheral and its settings throughout its operation.
 */

typedef struct
{
	// pointer to hold the base address of the GPIO peripherals
	GPIO_RegDef_t *pGPIOx;               // This holds the base address of GPIO port to which the pin belongs
	GPIO_PinConfig_t GPIO_PinConfig;     // This holds GPIO pin configuration structure

}GPIO_Handle_t;

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi);      // To enable or disable peripheral clock for a given Base address

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle);        // To initialize GPIO port - take pointer to the Handle structure
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);           // To de-initilize GPIO port - sends back to reset state

/*
 * Data read and write
 */
void GPIO_ReadfromInputPin(void);      // To read from a particular Input pin
void GPIO_ReadfromInputPort(void);     // To read from entire Input Port
void GPIO_WriteToOutputPin(void);      // To write to a particular Output pin
void GPIO_WriteToOutputPort(void);     // To write to entire Output port
void GPIO_ToggleOutputPin(void);       // To toggle output pin

/*
 * ISR Configuration and Interrupt Handling
 */
void GPIO_IRQConfig(void);             // To configure Interrupt request number
void GPIO_IRQHandling(void);           // To Handle the Interrupt



#endif /* STM32F407XX_GPIO_DRIVER_H_ */
