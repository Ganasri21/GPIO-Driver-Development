
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002484  08002484  00003484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002530  08002530  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  08002530  08002530  00003530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002538  08002538  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002538  08002538  00003538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800253c  0800253c  0000353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08002540  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          00000594  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000610  20000610  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002152  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008b4  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00006ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001bf  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ad9  00000000  00000000  00006edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007a1a  00000000  00000000  000099b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000113d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000108c  00000000  00000000  00011418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000124a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00001ef5  00000000  00000000  00012510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800246c 	.word	0x0800246c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800246c 	.word	0x0800246c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART1;
 8000284:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <USART2_Init+0x3c>)
 8000286:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <USART2_Init+0x40>)
 8000288:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800028a:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <USART2_Init+0x3c>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000290:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000292:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <USART2_Init+0x3c>)
 8000294:	2200      	movs	r2, #0
 8000296:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000298:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <USART2_Init+0x3c>)
 800029a:	2202      	movs	r2, #2
 800029c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800029e:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <USART2_Init+0x3c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <USART2_Init+0x3c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002aa:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <USART2_Init+0x3c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80002b0:	4802      	ldr	r0, [pc, #8]	@ (80002bc <USART2_Init+0x3c>)
 80002b2:	f000 fd97 	bl	8000de4 <USART_Init>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000498 	.word	0x20000498
 80002c0:	40011000 	.word	0x40011000

080002c4 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOB;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <USART2_GPIOInit+0x40>)
 80002cc:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ce:	2302      	movs	r3, #2
 80002d0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002d2:	2300      	movs	r3, #0
 80002d4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002d6:	2301      	movs	r3, #1
 80002d8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002da:	2302      	movs	r3, #2
 80002dc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 80002de:	2307      	movs	r3, #7
 80002e0:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_6;
 80002e2:	2306      	movs	r3, #6
 80002e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 faa3 	bl	8000834 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fa9d 	bl	8000834 <GPIO_Init>

}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40020400 	.word	0x40020400

08000308 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	e002      	b.n	800031a <delay+0x12>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <delay+0x28>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d9f8      	bls.n	8000314 <delay+0xc>
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	0003d08f 	.word	0x0003d08f

08000334 <main>:
int main(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800033e:	f000 f8c1 	bl	80004c4 <initialise_monitor_handles>

	USART2_GPIOInit();
 8000342:	f7ff ffbf 	bl	80002c4 <USART2_GPIOInit>
    USART2_Init();
 8000346:	f7ff ff9b 	bl	8000280 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART1,ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	2025      	movs	r0, #37	@ 0x25
 800034e:	f000 fedf 	bl	8001110 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART1,ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	482f      	ldr	r0, [pc, #188]	@ (8000414 <main+0xe0>)
 8000356:	f000 fdc6 	bl	8000ee6 <USART_PeripheralControl>

    printf("Application is running\n");
 800035a:	482f      	ldr	r0, [pc, #188]	@ (8000418 <main+0xe4>)
 800035c:	f001 fa28 	bl	80017b0 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000360:	bf00      	nop
 8000362:	2100      	movs	r1, #0
 8000364:	482d      	ldr	r0, [pc, #180]	@ (800041c <main+0xe8>)
 8000366:	f000 fc05 	bl	8000b74 <GPIO_ReadFromInputPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f8      	beq.n	8000362 <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000370:	f7ff ffca 	bl	8000308 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <main+0xec>)
 8000378:	fba3 1302 	umull	r1, r3, r3, r2
 800037c:	0859      	lsrs	r1, r3, #1
 800037e:	460b      	mov	r3, r1
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	440b      	add	r3, r1
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8000388:	bf00      	nop
 800038a:	4a26      	ldr	r2, [pc, #152]	@ (8000424 <main+0xf0>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff1c 	bl	80001d0 <strlen>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	4922      	ldr	r1, [pc, #136]	@ (8000428 <main+0xf4>)
 800039e:	4823      	ldr	r0, [pc, #140]	@ (800042c <main+0xf8>)
 80003a0:	f000 fe8e 	bl	80010c0 <USART_ReceiveDataIT>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1ef      	bne.n	800038a <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <main+0xf0>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000424 <main+0xf0>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff08 	bl	80001d0 <strlen>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4621      	mov	r1, r4
 80003c6:	4819      	ldr	r0, [pc, #100]	@ (800042c <main+0xf8>)
 80003c8:	f000 fe2c 	bl	8001024 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 80003cc:	4a15      	ldr	r2, [pc, #84]	@ (8000424 <main+0xf0>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4816      	ldr	r0, [pc, #88]	@ (8000430 <main+0xfc>)
 80003d8:	f001 f982 	bl	80016e0 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 80003dc:	bf00      	nop
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <main+0x100>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d1fb      	bne.n	80003de <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 80003e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000424 <main+0xf0>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff feee 	bl	80001d0 <strlen>
 80003f4:	4603      	mov	r3, r0
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000428 <main+0xf4>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 80003fe:	490a      	ldr	r1, [pc, #40]	@ (8000428 <main+0xf4>)
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <main+0x104>)
 8000402:	f001 f96d 	bl	80016e0 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <main+0x100>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3301      	adds	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000412:	e7a5      	b.n	8000360 <main+0x2c>
 8000414:	40011000 	.word	0x40011000
 8000418:	080024bc 	.word	0x080024bc
 800041c:	40020000 	.word	0x40020000
 8000420:	aaaaaaab 	.word	0xaaaaaaab
 8000424:	20000000 	.word	0x20000000
 8000428:	20000098 	.word	0x20000098
 800042c:	20000498 	.word	0x20000498
 8000430:	080024d4 	.word	0x080024d4
 8000434:	200004bc 	.word	0x200004bc
 8000438:	080024e8 	.word	0x080024e8

0800043c <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000440:	4802      	ldr	r0, [pc, #8]	@ (800044c <USART2_IRQHandler+0x10>)
 8000442:	f000 fee9 	bl	8001218 <USART_IRQHandling>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000498 	.word	0x20000498

08000450 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d102      	bne.n	8000468 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 8000462:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <USART_ApplicationEventCallback+0x24>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	200004bc 	.word	0x200004bc

08000478 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <ITM_SendChar+0x44>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <ITM_SendChar+0x44>)
 8000488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800048c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <ITM_SendChar+0x48>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <ITM_SendChar+0x48>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800049a:	bf00      	nop
 800049c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f8      	beq.n	800049c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004aa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	6013      	str	r3, [r2, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	e000edfc 	.word	0xe000edfc
 80004c0:	e0000e00 	.word	0xe0000e00

080004c4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	e00a      	b.n	80004f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e2:	f3af 8000 	nop.w
 80004e6:	4601      	mov	r1, r0
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	b2ca      	uxtb	r2, r1
 80004f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	dbf0      	blt.n	80004e2 <_read+0x12>
  }

  return len;
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e009      	b.n	8000530 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffa7 	bl	8000478 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf1      	blt.n	800051c <_write+0x12>
  }
  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_close>:

int _close(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000568:	605a      	str	r2, [r3, #4]
  return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <_isatty>:

int _isatty(int file)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
	...

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f001 fa1a 	bl	8001a0c <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20020000 	.word	0x20020000
 8000604:	00000400 	.word	0x00000400
 8000608:	200004c0 	.word	0x200004c0
 800060c:	20000610 	.word	0x20000610

08000610 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000612:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000614:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	@ (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	@ (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063e:	f001 f9eb 	bl	8001a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fe77 	bl	8000334 <main>

08000646 <LoopForever>:

LoopForever:
  b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   r0, =_estack
 8000648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000654:	08002540 	.word	0x08002540
  ldr r2, =_sbss
 8000658:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800065c:	20000610 	.word	0x20000610

08000660 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC_IRQHandler>
	...

08000664 <GPIO_PeriClockControl>:
 *
 * @Note            -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d162      	bne.n	800073c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a64      	ldr	r2, [pc, #400]	@ (800080c <GPIO_PeriClockControl+0x1a8>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d106      	bne.n	800068c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800067e:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a63      	ldr	r2, [pc, #396]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800068a:	e0b9      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a61      	ldr	r2, [pc, #388]	@ (8000814 <GPIO_PeriClockControl+0x1b0>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000694:	4b5e      	ldr	r3, [pc, #376]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000698:	4a5d      	ldr	r2, [pc, #372]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006a0:	e0ae      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a5c      	ldr	r2, [pc, #368]	@ (8000818 <GPIO_PeriClockControl+0x1b4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006aa:	4b59      	ldr	r3, [pc, #356]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a58      	ldr	r2, [pc, #352]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b6:	e0a3      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a58      	ldr	r2, [pc, #352]	@ (800081c <GPIO_PeriClockControl+0x1b8>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006c0:	4b53      	ldr	r3, [pc, #332]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a52      	ldr	r2, [pc, #328]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006cc:	e098      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a53      	ldr	r2, [pc, #332]	@ (8000820 <GPIO_PeriClockControl+0x1bc>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80006d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a4d      	ldr	r2, [pc, #308]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006e2:	e08d      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a4f      	ldr	r2, [pc, #316]	@ (8000824 <GPIO_PeriClockControl+0x1c0>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d106      	bne.n	80006fa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80006ec:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f0:	4a47      	ldr	r2, [pc, #284]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f8:	e082      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a4a      	ldr	r2, [pc, #296]	@ (8000828 <GPIO_PeriClockControl+0x1c4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000702:	4b43      	ldr	r3, [pc, #268]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a42      	ldr	r2, [pc, #264]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800070e:	e077      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a46      	ldr	r2, [pc, #280]	@ (800082c <GPIO_PeriClockControl+0x1c8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d106      	bne.n	8000726 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800071e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000722:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000724:	e06c      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a41      	ldr	r2, [pc, #260]	@ (8000830 <GPIO_PeriClockControl+0x1cc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d168      	bne.n	8000800 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800072e:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a37      	ldr	r2, [pc, #220]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800073a:	e061      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a33      	ldr	r2, [pc, #204]	@ (800080c <GPIO_PeriClockControl+0x1a8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000744:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000748:	4a31      	ldr	r2, [pc, #196]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800074a:	f023 0301 	bic.w	r3, r3, #1
 800074e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000750:	e056      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a2f      	ldr	r2, [pc, #188]	@ (8000814 <GPIO_PeriClockControl+0x1b0>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a2c      	ldr	r2, [pc, #176]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000760:	f023 0302 	bic.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000766:	e04b      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a2b      	ldr	r2, [pc, #172]	@ (8000818 <GPIO_PeriClockControl+0x1b4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	4a26      	ldr	r2, [pc, #152]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000776:	f023 0304 	bic.w	r3, r3, #4
 800077a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800077c:	e040      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <GPIO_PeriClockControl+0x1b8>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800078c:	f023 0308 	bic.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000792:	e035      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <GPIO_PeriClockControl+0x1bc>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007a2:	f023 0310 	bic.w	r3, r3, #16
 80007a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a8:	e02a      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000824 <GPIO_PeriClockControl+0x1c0>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a16      	ldr	r2, [pc, #88]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007b8:	f023 0320 	bic.w	r3, r3, #32
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007be:	e01f      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <GPIO_PeriClockControl+0x1c4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d106      	bne.n	80007d6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007d4:	e014      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a14      	ldr	r2, [pc, #80]	@ (800082c <GPIO_PeriClockControl+0x1c8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ea:	e009      	b.n	8000800 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <GPIO_PeriClockControl+0x1cc>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d105      	bne.n	8000800 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f8:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <GPIO_PeriClockControl+0x1ac>)
 80007fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80007fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40021000 	.word	0x40021000
 8000824:	40021400 	.word	0x40021400
 8000828:	40021800 	.word	0x40021800
 800082c:	40021c00 	.word	0x40021c00
 8000830:	40022000 	.word	0x40022000

08000834 <GPIO_Init>:
 * @Note            -

 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;    // temp.register
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff0c 	bl	8000664 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d81f      	bhi.n	8000894 <GPIO_Init+0x60>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // Each pin take 2 bites. So, multiply by 2
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	795b      	ldrb	r3, [r3, #5]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	2303      	movs	r3, #3
 8000874:	408b      	lsls	r3, r1
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;      // setting
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e0ca      	b.n	8000a2a <GPIO_Init+0x1f6>
		 */

	}else
	{
		// the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d117      	bne.n	80008cc <GPIO_Init+0x98>
		{
			//1. Configure Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800089c:	4b4a      	ldr	r3, [pc, #296]	@ (80009c8 <GPIO_Init+0x194>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a46      	ldr	r2, [pc, #280]	@ (80009c8 <GPIO_Init+0x194>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <GPIO_Init+0x194>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7912      	ldrb	r2, [r2, #4]
 80008ba:	4611      	mov	r1, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	408a      	lsls	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a40      	ldr	r2, [pc, #256]	@ (80009c8 <GPIO_Init+0x194>)
 80008c6:	400b      	ands	r3, r1
 80008c8:	6093      	str	r3, [r2, #8]
 80008ca:	e035      	b.n	8000938 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d117      	bne.n	8000904 <GPIO_Init+0xd0>
		{
			//1. Configure Raising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d4:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <GPIO_Init+0x194>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7912      	ldrb	r2, [r2, #4]
 80008dc:	4611      	mov	r1, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	408a      	lsls	r2, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a38      	ldr	r2, [pc, #224]	@ (80009c8 <GPIO_Init+0x194>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ea:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <GPIO_Init+0x194>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a32      	ldr	r2, [pc, #200]	@ (80009c8 <GPIO_Init+0x194>)
 80008fe:	400b      	ands	r3, r1
 8000900:	60d3      	str	r3, [r2, #12]
 8000902:	e019      	b.n	8000938 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	795b      	ldrb	r3, [r3, #5]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d115      	bne.n	8000938 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090c:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <GPIO_Init+0x194>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7912      	ldrb	r2, [r2, #4]
 8000914:	4611      	mov	r1, r2
 8000916:	2201      	movs	r2, #1
 8000918:	408a      	lsls	r2, r1
 800091a:	4611      	mov	r1, r2
 800091c:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <GPIO_Init+0x194>)
 800091e:	430b      	orrs	r3, r1
 8000920:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <GPIO_Init+0x194>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4611      	mov	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	408a      	lsls	r2, r1
 8000930:	4611      	mov	r1, r2
 8000932:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <GPIO_Init+0x194>)
 8000934:	430b      	orrs	r3, r1
 8000936:	6093      	str	r3, [r2, #8]

		}
		//2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <GPIO_Init+0x198>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d04d      	beq.n	80009f0 <GPIO_Init+0x1bc>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1d      	ldr	r2, [pc, #116]	@ (80009d0 <GPIO_Init+0x19c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d032      	beq.n	80009c4 <GPIO_Init+0x190>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a1c      	ldr	r2, [pc, #112]	@ (80009d4 <GPIO_Init+0x1a0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d02b      	beq.n	80009c0 <GPIO_Init+0x18c>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1a      	ldr	r2, [pc, #104]	@ (80009d8 <GPIO_Init+0x1a4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d024      	beq.n	80009bc <GPIO_Init+0x188>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <GPIO_Init+0x1a8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d01d      	beq.n	80009b8 <GPIO_Init+0x184>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <GPIO_Init+0x1ac>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d016      	beq.n	80009b4 <GPIO_Init+0x180>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <GPIO_Init+0x1b0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00f      	beq.n	80009b0 <GPIO_Init+0x17c>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <GPIO_Init+0x1b4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d008      	beq.n	80009ac <GPIO_Init+0x178>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a13      	ldr	r2, [pc, #76]	@ (80009ec <GPIO_Init+0x1b8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d101      	bne.n	80009a8 <GPIO_Init+0x174>
 80009a4:	2308      	movs	r3, #8
 80009a6:	e024      	b.n	80009f2 <GPIO_Init+0x1be>
 80009a8:	2300      	movs	r3, #0
 80009aa:	e022      	b.n	80009f2 <GPIO_Init+0x1be>
 80009ac:	2307      	movs	r3, #7
 80009ae:	e020      	b.n	80009f2 <GPIO_Init+0x1be>
 80009b0:	2306      	movs	r3, #6
 80009b2:	e01e      	b.n	80009f2 <GPIO_Init+0x1be>
 80009b4:	2305      	movs	r3, #5
 80009b6:	e01c      	b.n	80009f2 <GPIO_Init+0x1be>
 80009b8:	2304      	movs	r3, #4
 80009ba:	e01a      	b.n	80009f2 <GPIO_Init+0x1be>
 80009bc:	2303      	movs	r3, #3
 80009be:	e018      	b.n	80009f2 <GPIO_Init+0x1be>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e016      	b.n	80009f2 <GPIO_Init+0x1be>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e014      	b.n	80009f2 <GPIO_Init+0x1be>
 80009c8:	40013c00 	.word	0x40013c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40021400 	.word	0x40021400
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40021c00 	.word	0x40021c00
 80009ec:	40022000 	.word	0x40022000
 80009f0:	2300      	movs	r3, #0
 80009f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80009f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b68 <GPIO_Init+0x334>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f8:	4a5b      	ldr	r2, [pc, #364]	@ (8000b68 <GPIO_Init+0x334>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fe:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000a00:	7c7a      	ldrb	r2, [r7, #17]
 8000a02:	7cbb      	ldrb	r3, [r7, #18]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	fa02 f103 	lsl.w	r1, r2, r3
 8000a0a:	4a58      	ldr	r2, [pc, #352]	@ (8000b6c <GPIO_Init+0x338>)
 8000a0c:	7cfb      	ldrb	r3, [r7, #19]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable EXTI interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a14:	4b56      	ldr	r3, [pc, #344]	@ (8000b70 <GPIO_Init+0x33c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	7912      	ldrb	r2, [r2, #4]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	408a      	lsls	r2, r1
 8000a22:	4611      	mov	r1, r2
 8000a24:	4a52      	ldr	r2, [pc, #328]	@ (8000b70 <GPIO_Init+0x33c>)
 8000a26:	430b      	orrs	r3, r1
 8000a28:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	799b      	ldrb	r3, [r3, #6]
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	408b      	lsls	r3, r1
 8000a50:	43db      	mvns	r3, r3
 8000a52:	4619      	mov	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	400a      	ands	r2, r1
 8000a5a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;    // setting
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6899      	ldr	r1, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	609a      	str	r2, [r3, #8]
	temp=0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	791b      	ldrb	r3, [r3, #4]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2303      	movs	r3, #3
 8000a90:	408b      	lsls	r3, r1
 8000a92:	43db      	mvns	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;    // setting
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68d9      	ldr	r1, [r3, #12]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	60da      	str	r2, [r3, #12]
	temp=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2301      	movs	r3, #1
 8000ad0:	408b      	lsls	r3, r1
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	400a      	ands	r2, r1
 8000adc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;     // setting
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6859      	ldr	r1, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	605a      	str	r2, [r3, #4]
	temp=0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]


	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN )
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	795b      	ldrb	r3, [r3, #5]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d131      	bne.n	8000b5e <GPIO_Init+0x32a>
	{
		// configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));  // clearing
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	7c3a      	ldrb	r2, [r7, #16]
 8000b12:	3208      	adds	r2, #8
 8000b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	7c3a      	ldrb	r2, [r7, #16]
 8000b2c:	4001      	ands	r1, r0
 8000b2e:	3208      	adds	r2, #8
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));      // setting
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	7c3a      	ldrb	r2, [r7, #16]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7a5b      	ldrb	r3, [r3, #9]
 8000b44:	461a      	mov	r2, r3
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	7c3a      	ldrb	r2, [r7, #16]
 8000b56:	4301      	orrs	r1, r0
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <GPIO_ReadFromInputPin>:
 * @Note            -

 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
	return value;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000ba6:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <RCC_GetPCLK1Value+0x9c>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000bb4:	7a7b      	ldrb	r3, [r7, #9]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <RCC_GetPCLK1Value+0xa0>)
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00b      	b.n	8000bd8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000bc0:	7a7b      	ldrb	r3, [r7, #9]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d102      	bne.n	8000bcc <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <RCC_GetPCLK1Value+0xa4>)
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e005      	b.n	8000bd8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000bcc:	7a7b      	ldrb	r3, [r7, #9]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d102      	bne.n	8000bd8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000bd2:	f000 f88d 	bl	8000cf0 <RCC_GetPLLOutputClock>
 8000bd6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <RCC_GetPCLK1Value+0x9c>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000be6:	7a3b      	ldrb	r3, [r7, #8]
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	d802      	bhi.n	8000bf2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	72fb      	strb	r3, [r7, #11]
 8000bf0:	e005      	b.n	8000bfe <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000bf2:	7a3b      	ldrb	r3, [r7, #8]
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <RCC_GetPCLK1Value+0xa8>)
 8000bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfc:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <RCC_GetPCLK1Value+0x9c>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	0a9b      	lsrs	r3, r3, #10
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000c0c:	7a3b      	ldrb	r3, [r7, #8]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d802      	bhi.n	8000c18 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	72bb      	strb	r3, [r7, #10]
 8000c16:	e004      	b.n	8000c22 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000c18:	7a3b      	ldrb	r3, [r7, #8]
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <RCC_GetPCLK1Value+0xac>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c2a:	7abb      	ldrb	r3, [r7, #10]
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	007a1200 	.word	0x007a1200
 8000c48:	2000000c 	.word	0x2000000c
 8000c4c:	2000001c 	.word	0x2000001c

08000c50 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <RCC_GetPCLK2Value+0x8c>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000c68:	7a7b      	ldrb	r3, [r7, #9]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <RCC_GetPCLK2Value+0x90>)
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e001      	b.n	8000c78 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <RCC_GetPCLK2Value+0x94>)
 8000c76:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <RCC_GetPCLK2Value+0x8c>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d802      	bhi.n	8000c90 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	72fb      	strb	r3, [r7, #11]
 8000c8e:	e005      	b.n	8000c9c <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b08      	subs	r3, #8
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <RCC_GetPCLK2Value+0x98>)
 8000c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9a:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <RCC_GetPCLK2Value+0x8c>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	0b5b      	lsrs	r3, r3, #13
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d802      	bhi.n	8000cb4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	72bb      	strb	r3, [r7, #10]
 8000cb2:	e004      	b.n	8000cbe <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <RCC_GetPCLK2Value+0x9c>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ccc:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000cce:	683b      	ldr	r3, [r7, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	00f42400 	.word	0x00f42400
 8000ce4:	007a1200 	.word	0x007a1200
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	2000001c 	.word	0x2000001c

08000cf0 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a31      	ldr	r2, [pc, #196]	@ (8000dd8 <USART_SetBaudRate+0xd8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d003      	beq.n	8000d1e <USART_SetBaudRate+0x1e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a30      	ldr	r2, [pc, #192]	@ (8000ddc <USART_SetBaudRate+0xdc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d103      	bne.n	8000d26 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000d1e:	f7ff ff97 	bl	8000c50 <RCC_GetPCLK2Value>
 8000d22:	61f8      	str	r0, [r7, #28]
 8000d24:	e002      	b.n	8000d2c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000d26:	f7ff ff3b 	bl	8000ba0 <RCC_GetPCLK1Value>
 8000d2a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00b      	beq.n	8000d50 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	009a      	lsls	r2, r3, #2
 8000d42:	441a      	add	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e00a      	b.n	8000d66 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000d50:	69fa      	ldr	r2, [r7, #28]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	009a      	lsls	r2, r3, #2
 8000d5a:	441a      	add	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d64:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <USART_SetBaudRate+0xe0>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2264      	movs	r2, #100	@ 0x64
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00a      	beq.n	8000dac <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	3332      	adds	r3, #50	@ 0x32
 8000d9c:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <USART_SetBaudRate+0xe0>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e009      	b.n	8000dc0 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	3332      	adds	r3, #50	@ 0x32
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <USART_SetBaudRate+0xe0>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	609a      	str	r2, [r3, #8]
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	51eb851f 	.word	0x51eb851f

08000de4 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f890 	bl	8000f1c <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d104      	bne.n	8000e0e <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e010      	b.n	8000e30 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e007      	b.n	8000e30 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d103      	bne.n	8000e30 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f043 030c 	orr.w	r3, r3, #12
 8000e2e:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7b5b      	ldrb	r3, [r3, #13]
 8000e34:	031b      	lsls	r3, r3, #12
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7b9b      	ldrb	r3, [r3, #14]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d104      	bne.n	8000e4e <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e00b      	b.n	8000e66 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7b9b      	ldrb	r3, [r3, #14]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d107      	bne.n	8000e66 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5c:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e64:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7b1b      	ldrb	r3, [r3, #12]
 8000e76:	031b      	lsls	r3, r3, #12
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7bdb      	ldrb	r3, [r3, #15]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d104      	bne.n	8000e9c <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	e014      	b.n	8000ec6 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7bdb      	ldrb	r3, [r3, #15]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d104      	bne.n	8000eae <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e00b      	b.n	8000ec6 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7bdb      	ldrb	r3, [r3, #15]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d107      	bne.n	8000ec6 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebc:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec4:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f7ff ff11 	bl	8000d00 <USART_SetBaudRate>

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d106      	bne.n	8000f06 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000f04:	e005      	b.n	8000f12 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60da      	str	r2, [r3, #12]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d12b      	bne.n	8000f86 <USART_PeriClockControl+0x6a>
	{
		if(pUSARTx == USART1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe8 <USART_PeriClockControl+0xcc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d106      	bne.n	8000f44 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000f36:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
		{
			UART4_PCLK_DI();
		}
	}

}
 8000f42:	e04b      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		}else if (pUSARTx == USART2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <USART_PeriClockControl+0xd4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d106      	bne.n	8000f5a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f58:	e040      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		}else if (pUSARTx == USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a25      	ldr	r2, [pc, #148]	@ (8000ff4 <USART_PeriClockControl+0xd8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d106      	bne.n	8000f70 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f6e:	e035      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		else if (pUSARTx == UART4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <USART_PeriClockControl+0xdc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d131      	bne.n	8000fdc <USART_PeriClockControl+0xc0>
			UART4_PCLK_EN();
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f84:	e02a      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		if(pUSARTx == USART1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <USART_PeriClockControl+0xcc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <USART_PeriClockControl+0x80>
			USART1_PCLK_DI();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000f94:	f023 0310 	bic.w	r3, r3, #16
 8000f98:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f9a:	e01f      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		}else if (pUSARTx == USART2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <USART_PeriClockControl+0xd4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d106      	bne.n	8000fb2 <USART_PeriClockControl+0x96>
			USART2_PCLK_DI();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000faa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fb0:	e014      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		}else if (pUSARTx == USART3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <USART_PeriClockControl+0xd8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d106      	bne.n	8000fc8 <USART_PeriClockControl+0xac>
			USART3_PCLK_DI();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fc6:	e009      	b.n	8000fdc <USART_PeriClockControl+0xc0>
		else if (pUSARTx == UART4)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <USART_PeriClockControl+0xdc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d105      	bne.n	8000fdc <USART_PeriClockControl+0xc0>
			UART4_PCLK_DI();
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <USART_PeriClockControl+0xd0>)
 8000fd6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40004800 	.word	0x40004800
 8000ff8:	40004c00 	.word	0x40004c00

08000ffc <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e031      	b.n	800109a <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001036:	bf00      	nop
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffdc 	bl	8000ffc <USART_GetFlagStatus>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f6      	beq.n	8001038 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	7b5b      	ldrb	r3, [r3, #13]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d118      	bne.n	8001084 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001064:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	7b9b      	ldrb	r3, [r3, #14]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d106      	bne.n	800107c <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	3301      	adds	r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e00b      	b.n	8001094 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	3301      	adds	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	e007      	b.n	8001094 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3c9      	bcc.n	8001036 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80010a2:	bf00      	nop
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2140      	movs	r1, #64	@ 0x40
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffa6 	bl	8000ffc <USART_GetFlagStatus>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f6      	beq.n	80010a4 <USART_SendData+0x80>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <USART_ReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010d2:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d014      	beq.n	8001104 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0220 	orr.w	r2, r2, #32
 8001102:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8001104:	7dfb      	ldrb	r3, [r7, #23]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <USART_IRQInterruptConfig>:
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d133      	bne.n	800118e <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b1f      	cmp	r3, #31
 800112a:	d80a      	bhi.n	8001142 <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 800112c:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <USART_IRQInterruptConfig+0xf0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a31      	ldr	r2, [pc, #196]	@ (8001200 <USART_IRQInterruptConfig+0xf0>)
 800113c:	430b      	orrs	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001140:	e059      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b1f      	cmp	r3, #31
 8001146:	d90f      	bls.n	8001168 <USART_IRQInterruptConfig+0x58>
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b3f      	cmp	r3, #63	@ 0x3f
 800114c:	d80c      	bhi.n	8001168 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800114e:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <USART_IRQInterruptConfig+0xf4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	f002 021f 	and.w	r2, r2, #31
 8001158:	2101      	movs	r1, #1
 800115a:	fa01 f202 	lsl.w	r2, r1, r2
 800115e:	4611      	mov	r1, r2
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <USART_IRQInterruptConfig+0xf4>)
 8001162:	430b      	orrs	r3, r1
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e046      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b3f      	cmp	r3, #63	@ 0x3f
 800116c:	d943      	bls.n	80011f6 <USART_IRQInterruptConfig+0xe6>
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b5f      	cmp	r3, #95	@ 0x5f
 8001172:	d840      	bhi.n	80011f6 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <USART_IRQInterruptConfig+0xf8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	4611      	mov	r1, r2
 8001186:	4a20      	ldr	r2, [pc, #128]	@ (8001208 <USART_IRQInterruptConfig+0xf8>)
 8001188:	430b      	orrs	r3, r1
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	e033      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b1f      	cmp	r3, #31
 8001192:	d80a      	bhi.n	80011aa <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <USART_IRQInterruptConfig+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <USART_IRQInterruptConfig+0xfc>)
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	e025      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b1f      	cmp	r3, #31
 80011ae:	d90f      	bls.n	80011d0 <USART_IRQInterruptConfig+0xc0>
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011b4:	d80c      	bhi.n	80011d0 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <USART_IRQInterruptConfig+0x100>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	f002 021f 	and.w	r2, r2, #31
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <USART_IRQInterruptConfig+0x100>)
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e012      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d90f      	bls.n	80011f6 <USART_IRQInterruptConfig+0xe6>
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b5f      	cmp	r3, #95	@ 0x5f
 80011da:	d80c      	bhi.n	80011f6 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <USART_IRQInterruptConfig+0x104>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <USART_IRQInterruptConfig+0x104>)
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	e7ff      	b.n	80011f6 <USART_IRQInterruptConfig+0xe6>
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000e104 	.word	0xe000e104
 8001208:	e000e10c 	.word	0xe000e10c
 800120c:	e000e180 	.word	0xe000e180
 8001210:	e000e184 	.word	0xe000e184
 8001214:	e000e18c 	.word	0xe000e18c

08001218 <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001236:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d021      	beq.n	8001282 <USART_IRQHandling+0x6a>
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01e      	beq.n	8001282 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d119      	bne.n	8001282 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d115      	bne.n	8001282 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001264:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff f8e7 	bl	8000450 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001298:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d055      	beq.n	800134c <USART_IRQHandling+0x134>
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d052      	beq.n	800134c <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d14d      	bne.n	800134c <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03d      	beq.n	8001334 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7b5b      	ldrb	r3, [r3, #13]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d129      	bne.n	8001314 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012d4:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b9b      	ldrb	r3, [r3, #14]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	1e9a      	subs	r2, r3, #2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	e01a      	b.n	8001334 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	e00f      	b.n	8001334 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134a:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d073      	beq.n	8001452 <USART_IRQHandling+0x23a>
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d070      	beq.n	8001452 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001376:	2b01      	cmp	r3, #1
 8001378:	d16b      	bne.n	8001452 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d053      	beq.n	800142a <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7b5b      	ldrb	r3, [r3, #13]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d12f      	bne.n	80013ea <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b9b      	ldrb	r3, [r3, #14]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d119      	bne.n	80013c6 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013a2:	b292      	uxth	r2, r2
 80013a4:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	1e9a      	subs	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	61da      	str	r2, [r3, #28]
 80013c4:	e031      	b.n	800142a <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	61da      	str	r2, [r3, #28]
 80013e8:	e01f      	b.n	800142a <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d107      	bne.n	8001402 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e009      	b.n	8001416 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7fe ffff 	bl	8000450 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800145c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001468:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00e      	beq.n	800149a <USART_IRQHandling+0x282>
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001490:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001492:	2103      	movs	r1, #3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7fe ffdb 	bl	8000450 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00f      	beq.n	80014d8 <USART_IRQHandling+0x2c0>
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f023 0310 	bic.w	r3, r3, #16
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80014d0:	2102      	movs	r1, #2
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7fe ffbc 	bl	8000450 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0305 	and.w	r3, r3, #5
 80014ee:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <USART_IRQHandling+0x2ec>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80014fc:	2107      	movs	r1, #7
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe ffa6 	bl	8000450 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01e      	beq.n	8001554 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001528:	2105      	movs	r1, #5
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7fe ff90 	bl	8000450 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800153a:	2106      	movs	r1, #6
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe ff87 	bl	8000450 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800154c:	2107      	movs	r1, #7
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7fe ff7e 	bl	8000450 <USART_ApplicationEventCallback>
		}
	}


}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <std>:
 800155c:	2300      	movs	r3, #0
 800155e:	b510      	push	{r4, lr}
 8001560:	4604      	mov	r4, r0
 8001562:	e9c0 3300 	strd	r3, r3, [r0]
 8001566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800156a:	6083      	str	r3, [r0, #8]
 800156c:	8181      	strh	r1, [r0, #12]
 800156e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001570:	81c2      	strh	r2, [r0, #14]
 8001572:	6183      	str	r3, [r0, #24]
 8001574:	4619      	mov	r1, r3
 8001576:	2208      	movs	r2, #8
 8001578:	305c      	adds	r0, #92	@ 0x5c
 800157a:	f000 f9f9 	bl	8001970 <memset>
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <std+0x58>)
 8001580:	6263      	str	r3, [r4, #36]	@ 0x24
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <std+0x5c>)
 8001584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <std+0x60>)
 8001588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <std+0x64>)
 800158c:	6323      	str	r3, [r4, #48]	@ 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <std+0x68>)
 8001590:	6224      	str	r4, [r4, #32]
 8001592:	429c      	cmp	r4, r3
 8001594:	d006      	beq.n	80015a4 <std+0x48>
 8001596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800159a:	4294      	cmp	r4, r2
 800159c:	d002      	beq.n	80015a4 <std+0x48>
 800159e:	33d0      	adds	r3, #208	@ 0xd0
 80015a0:	429c      	cmp	r4, r3
 80015a2:	d105      	bne.n	80015b0 <std+0x54>
 80015a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80015a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ac:	f000 ba58 	b.w	8001a60 <__retarget_lock_init_recursive>
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	080017c1 	.word	0x080017c1
 80015b8:	080017e3 	.word	0x080017e3
 80015bc:	0800181b 	.word	0x0800181b
 80015c0:	0800183f 	.word	0x0800183f
 80015c4:	200004c4 	.word	0x200004c4

080015c8 <stdio_exit_handler>:
 80015c8:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <stdio_exit_handler+0xc>)
 80015ca:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <stdio_exit_handler+0x10>)
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <stdio_exit_handler+0x14>)
 80015ce:	f000 b869 	b.w	80016a4 <_fwalk_sglue>
 80015d2:	bf00      	nop
 80015d4:	20000020 	.word	0x20000020
 80015d8:	080022f5 	.word	0x080022f5
 80015dc:	20000030 	.word	0x20000030

080015e0 <cleanup_stdio>:
 80015e0:	6841      	ldr	r1, [r0, #4]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <cleanup_stdio+0x34>)
 80015e4:	4299      	cmp	r1, r3
 80015e6:	b510      	push	{r4, lr}
 80015e8:	4604      	mov	r4, r0
 80015ea:	d001      	beq.n	80015f0 <cleanup_stdio+0x10>
 80015ec:	f000 fe82 	bl	80022f4 <_fflush_r>
 80015f0:	68a1      	ldr	r1, [r4, #8]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <cleanup_stdio+0x38>)
 80015f4:	4299      	cmp	r1, r3
 80015f6:	d002      	beq.n	80015fe <cleanup_stdio+0x1e>
 80015f8:	4620      	mov	r0, r4
 80015fa:	f000 fe7b 	bl	80022f4 <_fflush_r>
 80015fe:	68e1      	ldr	r1, [r4, #12]
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <cleanup_stdio+0x3c>)
 8001602:	4299      	cmp	r1, r3
 8001604:	d004      	beq.n	8001610 <cleanup_stdio+0x30>
 8001606:	4620      	mov	r0, r4
 8001608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800160c:	f000 be72 	b.w	80022f4 <_fflush_r>
 8001610:	bd10      	pop	{r4, pc}
 8001612:	bf00      	nop
 8001614:	200004c4 	.word	0x200004c4
 8001618:	2000052c 	.word	0x2000052c
 800161c:	20000594 	.word	0x20000594

08001620 <global_stdio_init.part.0>:
 8001620:	b510      	push	{r4, lr}
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <global_stdio_init.part.0+0x30>)
 8001624:	4c0b      	ldr	r4, [pc, #44]	@ (8001654 <global_stdio_init.part.0+0x34>)
 8001626:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <global_stdio_init.part.0+0x38>)
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	4620      	mov	r0, r4
 800162c:	2200      	movs	r2, #0
 800162e:	2104      	movs	r1, #4
 8001630:	f7ff ff94 	bl	800155c <std>
 8001634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001638:	2201      	movs	r2, #1
 800163a:	2109      	movs	r1, #9
 800163c:	f7ff ff8e 	bl	800155c <std>
 8001640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001644:	2202      	movs	r2, #2
 8001646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800164a:	2112      	movs	r1, #18
 800164c:	f7ff bf86 	b.w	800155c <std>
 8001650:	200005fc 	.word	0x200005fc
 8001654:	200004c4 	.word	0x200004c4
 8001658:	080015c9 	.word	0x080015c9

0800165c <__sfp_lock_acquire>:
 800165c:	4801      	ldr	r0, [pc, #4]	@ (8001664 <__sfp_lock_acquire+0x8>)
 800165e:	f000 ba00 	b.w	8001a62 <__retarget_lock_acquire_recursive>
 8001662:	bf00      	nop
 8001664:	20000605 	.word	0x20000605

08001668 <__sfp_lock_release>:
 8001668:	4801      	ldr	r0, [pc, #4]	@ (8001670 <__sfp_lock_release+0x8>)
 800166a:	f000 b9fb 	b.w	8001a64 <__retarget_lock_release_recursive>
 800166e:	bf00      	nop
 8001670:	20000605 	.word	0x20000605

08001674 <__sinit>:
 8001674:	b510      	push	{r4, lr}
 8001676:	4604      	mov	r4, r0
 8001678:	f7ff fff0 	bl	800165c <__sfp_lock_acquire>
 800167c:	6a23      	ldr	r3, [r4, #32]
 800167e:	b11b      	cbz	r3, 8001688 <__sinit+0x14>
 8001680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001684:	f7ff bff0 	b.w	8001668 <__sfp_lock_release>
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__sinit+0x28>)
 800168a:	6223      	str	r3, [r4, #32]
 800168c:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <__sinit+0x2c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f5      	bne.n	8001680 <__sinit+0xc>
 8001694:	f7ff ffc4 	bl	8001620 <global_stdio_init.part.0>
 8001698:	e7f2      	b.n	8001680 <__sinit+0xc>
 800169a:	bf00      	nop
 800169c:	080015e1 	.word	0x080015e1
 80016a0:	200005fc 	.word	0x200005fc

080016a4 <_fwalk_sglue>:
 80016a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a8:	4607      	mov	r7, r0
 80016aa:	4688      	mov	r8, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	2600      	movs	r6, #0
 80016b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016b4:	f1b9 0901 	subs.w	r9, r9, #1
 80016b8:	d505      	bpl.n	80016c6 <_fwalk_sglue+0x22>
 80016ba:	6824      	ldr	r4, [r4, #0]
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d1f7      	bne.n	80016b0 <_fwalk_sglue+0xc>
 80016c0:	4630      	mov	r0, r6
 80016c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016c6:	89ab      	ldrh	r3, [r5, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d907      	bls.n	80016dc <_fwalk_sglue+0x38>
 80016cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016d0:	3301      	adds	r3, #1
 80016d2:	d003      	beq.n	80016dc <_fwalk_sglue+0x38>
 80016d4:	4629      	mov	r1, r5
 80016d6:	4638      	mov	r0, r7
 80016d8:	47c0      	blx	r8
 80016da:	4306      	orrs	r6, r0
 80016dc:	3568      	adds	r5, #104	@ 0x68
 80016de:	e7e9      	b.n	80016b4 <_fwalk_sglue+0x10>

080016e0 <iprintf>:
 80016e0:	b40f      	push	{r0, r1, r2, r3}
 80016e2:	b507      	push	{r0, r1, r2, lr}
 80016e4:	4906      	ldr	r1, [pc, #24]	@ (8001700 <iprintf+0x20>)
 80016e6:	ab04      	add	r3, sp, #16
 80016e8:	6808      	ldr	r0, [r1, #0]
 80016ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80016ee:	6881      	ldr	r1, [r0, #8]
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f000 fad9 	bl	8001ca8 <_vfiprintf_r>
 80016f6:	b003      	add	sp, #12
 80016f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80016fc:	b004      	add	sp, #16
 80016fe:	4770      	bx	lr
 8001700:	2000002c 	.word	0x2000002c

08001704 <_puts_r>:
 8001704:	6a03      	ldr	r3, [r0, #32]
 8001706:	b570      	push	{r4, r5, r6, lr}
 8001708:	6884      	ldr	r4, [r0, #8]
 800170a:	4605      	mov	r5, r0
 800170c:	460e      	mov	r6, r1
 800170e:	b90b      	cbnz	r3, 8001714 <_puts_r+0x10>
 8001710:	f7ff ffb0 	bl	8001674 <__sinit>
 8001714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001716:	07db      	lsls	r3, r3, #31
 8001718:	d405      	bmi.n	8001726 <_puts_r+0x22>
 800171a:	89a3      	ldrh	r3, [r4, #12]
 800171c:	0598      	lsls	r0, r3, #22
 800171e:	d402      	bmi.n	8001726 <_puts_r+0x22>
 8001720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001722:	f000 f99e 	bl	8001a62 <__retarget_lock_acquire_recursive>
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	0719      	lsls	r1, r3, #28
 800172a:	d502      	bpl.n	8001732 <_puts_r+0x2e>
 800172c:	6923      	ldr	r3, [r4, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d135      	bne.n	800179e <_puts_r+0x9a>
 8001732:	4621      	mov	r1, r4
 8001734:	4628      	mov	r0, r5
 8001736:	f000 f8c5 	bl	80018c4 <__swsetup_r>
 800173a:	b380      	cbz	r0, 800179e <_puts_r+0x9a>
 800173c:	f04f 35ff 	mov.w	r5, #4294967295
 8001740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001742:	07da      	lsls	r2, r3, #31
 8001744:	d405      	bmi.n	8001752 <_puts_r+0x4e>
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	059b      	lsls	r3, r3, #22
 800174a:	d402      	bmi.n	8001752 <_puts_r+0x4e>
 800174c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800174e:	f000 f989 	bl	8001a64 <__retarget_lock_release_recursive>
 8001752:	4628      	mov	r0, r5
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	2b00      	cmp	r3, #0
 8001758:	da04      	bge.n	8001764 <_puts_r+0x60>
 800175a:	69a2      	ldr	r2, [r4, #24]
 800175c:	429a      	cmp	r2, r3
 800175e:	dc17      	bgt.n	8001790 <_puts_r+0x8c>
 8001760:	290a      	cmp	r1, #10
 8001762:	d015      	beq.n	8001790 <_puts_r+0x8c>
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	6022      	str	r2, [r4, #0]
 800176a:	7019      	strb	r1, [r3, #0]
 800176c:	68a3      	ldr	r3, [r4, #8]
 800176e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001772:	3b01      	subs	r3, #1
 8001774:	60a3      	str	r3, [r4, #8]
 8001776:	2900      	cmp	r1, #0
 8001778:	d1ed      	bne.n	8001756 <_puts_r+0x52>
 800177a:	2b00      	cmp	r3, #0
 800177c:	da11      	bge.n	80017a2 <_puts_r+0x9e>
 800177e:	4622      	mov	r2, r4
 8001780:	210a      	movs	r1, #10
 8001782:	4628      	mov	r0, r5
 8001784:	f000 f85f 	bl	8001846 <__swbuf_r>
 8001788:	3001      	adds	r0, #1
 800178a:	d0d7      	beq.n	800173c <_puts_r+0x38>
 800178c:	250a      	movs	r5, #10
 800178e:	e7d7      	b.n	8001740 <_puts_r+0x3c>
 8001790:	4622      	mov	r2, r4
 8001792:	4628      	mov	r0, r5
 8001794:	f000 f857 	bl	8001846 <__swbuf_r>
 8001798:	3001      	adds	r0, #1
 800179a:	d1e7      	bne.n	800176c <_puts_r+0x68>
 800179c:	e7ce      	b.n	800173c <_puts_r+0x38>
 800179e:	3e01      	subs	r6, #1
 80017a0:	e7e4      	b.n	800176c <_puts_r+0x68>
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	6022      	str	r2, [r4, #0]
 80017a8:	220a      	movs	r2, #10
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e7ee      	b.n	800178c <_puts_r+0x88>
	...

080017b0 <puts>:
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <puts+0xc>)
 80017b2:	4601      	mov	r1, r0
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f7ff bfa5 	b.w	8001704 <_puts_r>
 80017ba:	bf00      	nop
 80017bc:	2000002c 	.word	0x2000002c

080017c0 <__sread>:
 80017c0:	b510      	push	{r4, lr}
 80017c2:	460c      	mov	r4, r1
 80017c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c8:	f000 f8fc 	bl	80019c4 <_read_r>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	bfab      	itete	ge
 80017d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017d2:	89a3      	ldrhlt	r3, [r4, #12]
 80017d4:	181b      	addge	r3, r3, r0
 80017d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017da:	bfac      	ite	ge
 80017dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017de:	81a3      	strhlt	r3, [r4, #12]
 80017e0:	bd10      	pop	{r4, pc}

080017e2 <__swrite>:
 80017e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e6:	461f      	mov	r7, r3
 80017e8:	898b      	ldrh	r3, [r1, #12]
 80017ea:	05db      	lsls	r3, r3, #23
 80017ec:	4605      	mov	r5, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	4616      	mov	r6, r2
 80017f2:	d505      	bpl.n	8001800 <__swrite+0x1e>
 80017f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017f8:	2302      	movs	r3, #2
 80017fa:	2200      	movs	r2, #0
 80017fc:	f000 f8d0 	bl	80019a0 <_lseek_r>
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800180a:	81a3      	strh	r3, [r4, #12]
 800180c:	4632      	mov	r2, r6
 800180e:	463b      	mov	r3, r7
 8001810:	4628      	mov	r0, r5
 8001812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001816:	f000 b8e7 	b.w	80019e8 <_write_r>

0800181a <__sseek>:
 800181a:	b510      	push	{r4, lr}
 800181c:	460c      	mov	r4, r1
 800181e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001822:	f000 f8bd 	bl	80019a0 <_lseek_r>
 8001826:	1c43      	adds	r3, r0, #1
 8001828:	89a3      	ldrh	r3, [r4, #12]
 800182a:	bf15      	itete	ne
 800182c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800182e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001836:	81a3      	strheq	r3, [r4, #12]
 8001838:	bf18      	it	ne
 800183a:	81a3      	strhne	r3, [r4, #12]
 800183c:	bd10      	pop	{r4, pc}

0800183e <__sclose>:
 800183e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001842:	f000 b89d 	b.w	8001980 <_close_r>

08001846 <__swbuf_r>:
 8001846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001848:	460e      	mov	r6, r1
 800184a:	4614      	mov	r4, r2
 800184c:	4605      	mov	r5, r0
 800184e:	b118      	cbz	r0, 8001858 <__swbuf_r+0x12>
 8001850:	6a03      	ldr	r3, [r0, #32]
 8001852:	b90b      	cbnz	r3, 8001858 <__swbuf_r+0x12>
 8001854:	f7ff ff0e 	bl	8001674 <__sinit>
 8001858:	69a3      	ldr	r3, [r4, #24]
 800185a:	60a3      	str	r3, [r4, #8]
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	071a      	lsls	r2, r3, #28
 8001860:	d501      	bpl.n	8001866 <__swbuf_r+0x20>
 8001862:	6923      	ldr	r3, [r4, #16]
 8001864:	b943      	cbnz	r3, 8001878 <__swbuf_r+0x32>
 8001866:	4621      	mov	r1, r4
 8001868:	4628      	mov	r0, r5
 800186a:	f000 f82b 	bl	80018c4 <__swsetup_r>
 800186e:	b118      	cbz	r0, 8001878 <__swbuf_r+0x32>
 8001870:	f04f 37ff 	mov.w	r7, #4294967295
 8001874:	4638      	mov	r0, r7
 8001876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	6922      	ldr	r2, [r4, #16]
 800187c:	1a98      	subs	r0, r3, r2
 800187e:	6963      	ldr	r3, [r4, #20]
 8001880:	b2f6      	uxtb	r6, r6
 8001882:	4283      	cmp	r3, r0
 8001884:	4637      	mov	r7, r6
 8001886:	dc05      	bgt.n	8001894 <__swbuf_r+0x4e>
 8001888:	4621      	mov	r1, r4
 800188a:	4628      	mov	r0, r5
 800188c:	f000 fd32 	bl	80022f4 <_fflush_r>
 8001890:	2800      	cmp	r0, #0
 8001892:	d1ed      	bne.n	8001870 <__swbuf_r+0x2a>
 8001894:	68a3      	ldr	r3, [r4, #8]
 8001896:	3b01      	subs	r3, #1
 8001898:	60a3      	str	r3, [r4, #8]
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	6022      	str	r2, [r4, #0]
 80018a0:	701e      	strb	r6, [r3, #0]
 80018a2:	6962      	ldr	r2, [r4, #20]
 80018a4:	1c43      	adds	r3, r0, #1
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d004      	beq.n	80018b4 <__swbuf_r+0x6e>
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	07db      	lsls	r3, r3, #31
 80018ae:	d5e1      	bpl.n	8001874 <__swbuf_r+0x2e>
 80018b0:	2e0a      	cmp	r6, #10
 80018b2:	d1df      	bne.n	8001874 <__swbuf_r+0x2e>
 80018b4:	4621      	mov	r1, r4
 80018b6:	4628      	mov	r0, r5
 80018b8:	f000 fd1c 	bl	80022f4 <_fflush_r>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d0d9      	beq.n	8001874 <__swbuf_r+0x2e>
 80018c0:	e7d6      	b.n	8001870 <__swbuf_r+0x2a>
	...

080018c4 <__swsetup_r>:
 80018c4:	b538      	push	{r3, r4, r5, lr}
 80018c6:	4b29      	ldr	r3, [pc, #164]	@ (800196c <__swsetup_r+0xa8>)
 80018c8:	4605      	mov	r5, r0
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	460c      	mov	r4, r1
 80018ce:	b118      	cbz	r0, 80018d8 <__swsetup_r+0x14>
 80018d0:	6a03      	ldr	r3, [r0, #32]
 80018d2:	b90b      	cbnz	r3, 80018d8 <__swsetup_r+0x14>
 80018d4:	f7ff fece 	bl	8001674 <__sinit>
 80018d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018dc:	0719      	lsls	r1, r3, #28
 80018de:	d422      	bmi.n	8001926 <__swsetup_r+0x62>
 80018e0:	06da      	lsls	r2, r3, #27
 80018e2:	d407      	bmi.n	80018f4 <__swsetup_r+0x30>
 80018e4:	2209      	movs	r2, #9
 80018e6:	602a      	str	r2, [r5, #0]
 80018e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	f04f 30ff 	mov.w	r0, #4294967295
 80018f2:	e033      	b.n	800195c <__swsetup_r+0x98>
 80018f4:	0758      	lsls	r0, r3, #29
 80018f6:	d512      	bpl.n	800191e <__swsetup_r+0x5a>
 80018f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018fa:	b141      	cbz	r1, 800190e <__swsetup_r+0x4a>
 80018fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001900:	4299      	cmp	r1, r3
 8001902:	d002      	beq.n	800190a <__swsetup_r+0x46>
 8001904:	4628      	mov	r0, r5
 8001906:	f000 f8af 	bl	8001a68 <_free_r>
 800190a:	2300      	movs	r3, #0
 800190c:	6363      	str	r3, [r4, #52]	@ 0x34
 800190e:	89a3      	ldrh	r3, [r4, #12]
 8001910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001914:	81a3      	strh	r3, [r4, #12]
 8001916:	2300      	movs	r3, #0
 8001918:	6063      	str	r3, [r4, #4]
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	6023      	str	r3, [r4, #0]
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	81a3      	strh	r3, [r4, #12]
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	b94b      	cbnz	r3, 800193e <__swsetup_r+0x7a>
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001934:	d003      	beq.n	800193e <__swsetup_r+0x7a>
 8001936:	4621      	mov	r1, r4
 8001938:	4628      	mov	r0, r5
 800193a:	f000 fd29 	bl	8002390 <__smakebuf_r>
 800193e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001942:	f013 0201 	ands.w	r2, r3, #1
 8001946:	d00a      	beq.n	800195e <__swsetup_r+0x9a>
 8001948:	2200      	movs	r2, #0
 800194a:	60a2      	str	r2, [r4, #8]
 800194c:	6962      	ldr	r2, [r4, #20]
 800194e:	4252      	negs	r2, r2
 8001950:	61a2      	str	r2, [r4, #24]
 8001952:	6922      	ldr	r2, [r4, #16]
 8001954:	b942      	cbnz	r2, 8001968 <__swsetup_r+0xa4>
 8001956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800195a:	d1c5      	bne.n	80018e8 <__swsetup_r+0x24>
 800195c:	bd38      	pop	{r3, r4, r5, pc}
 800195e:	0799      	lsls	r1, r3, #30
 8001960:	bf58      	it	pl
 8001962:	6962      	ldrpl	r2, [r4, #20]
 8001964:	60a2      	str	r2, [r4, #8]
 8001966:	e7f4      	b.n	8001952 <__swsetup_r+0x8e>
 8001968:	2000      	movs	r0, #0
 800196a:	e7f7      	b.n	800195c <__swsetup_r+0x98>
 800196c:	2000002c 	.word	0x2000002c

08001970 <memset>:
 8001970:	4402      	add	r2, r0
 8001972:	4603      	mov	r3, r0
 8001974:	4293      	cmp	r3, r2
 8001976:	d100      	bne.n	800197a <memset+0xa>
 8001978:	4770      	bx	lr
 800197a:	f803 1b01 	strb.w	r1, [r3], #1
 800197e:	e7f9      	b.n	8001974 <memset+0x4>

08001980 <_close_r>:
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4d06      	ldr	r5, [pc, #24]	@ (800199c <_close_r+0x1c>)
 8001984:	2300      	movs	r3, #0
 8001986:	4604      	mov	r4, r0
 8001988:	4608      	mov	r0, r1
 800198a:	602b      	str	r3, [r5, #0]
 800198c:	f7fe fdd9 	bl	8000542 <_close>
 8001990:	1c43      	adds	r3, r0, #1
 8001992:	d102      	bne.n	800199a <_close_r+0x1a>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	b103      	cbz	r3, 800199a <_close_r+0x1a>
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	20000600 	.word	0x20000600

080019a0 <_lseek_r>:
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4d07      	ldr	r5, [pc, #28]	@ (80019c0 <_lseek_r+0x20>)
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	602a      	str	r2, [r5, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f7fe fdeb 	bl	800058a <_lseek>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_lseek_r+0x1e>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_lseek_r+0x1e>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	20000600 	.word	0x20000600

080019c4 <_read_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d07      	ldr	r5, [pc, #28]	@ (80019e4 <_read_r+0x20>)
 80019c8:	4604      	mov	r4, r0
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	602a      	str	r2, [r5, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7fe fd7c 	bl	80004d0 <_read>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_read_r+0x1e>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_read_r+0x1e>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	20000600 	.word	0x20000600

080019e8 <_write_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4d07      	ldr	r5, [pc, #28]	@ (8001a08 <_write_r+0x20>)
 80019ec:	4604      	mov	r4, r0
 80019ee:	4608      	mov	r0, r1
 80019f0:	4611      	mov	r1, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	602a      	str	r2, [r5, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f7fe fd87 	bl	800050a <_write>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_write_r+0x1e>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_write_r+0x1e>
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	20000600 	.word	0x20000600

08001a0c <__errno>:
 8001a0c:	4b01      	ldr	r3, [pc, #4]	@ (8001a14 <__errno+0x8>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000002c 	.word	0x2000002c

08001a18 <__libc_init_array>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8001a50 <__libc_init_array+0x38>)
 8001a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8001a54 <__libc_init_array+0x3c>)
 8001a1e:	1b64      	subs	r4, r4, r5
 8001a20:	10a4      	asrs	r4, r4, #2
 8001a22:	2600      	movs	r6, #0
 8001a24:	42a6      	cmp	r6, r4
 8001a26:	d109      	bne.n	8001a3c <__libc_init_array+0x24>
 8001a28:	4d0b      	ldr	r5, [pc, #44]	@ (8001a58 <__libc_init_array+0x40>)
 8001a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8001a5c <__libc_init_array+0x44>)
 8001a2c:	f000 fd1e 	bl	800246c <_init>
 8001a30:	1b64      	subs	r4, r4, r5
 8001a32:	10a4      	asrs	r4, r4, #2
 8001a34:	2600      	movs	r6, #0
 8001a36:	42a6      	cmp	r6, r4
 8001a38:	d105      	bne.n	8001a46 <__libc_init_array+0x2e>
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a40:	4798      	blx	r3
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7ee      	b.n	8001a24 <__libc_init_array+0xc>
 8001a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a4a:	4798      	blx	r3
 8001a4c:	3601      	adds	r6, #1
 8001a4e:	e7f2      	b.n	8001a36 <__libc_init_array+0x1e>
 8001a50:	08002538 	.word	0x08002538
 8001a54:	08002538 	.word	0x08002538
 8001a58:	08002538 	.word	0x08002538
 8001a5c:	0800253c 	.word	0x0800253c

08001a60 <__retarget_lock_init_recursive>:
 8001a60:	4770      	bx	lr

08001a62 <__retarget_lock_acquire_recursive>:
 8001a62:	4770      	bx	lr

08001a64 <__retarget_lock_release_recursive>:
 8001a64:	4770      	bx	lr
	...

08001a68 <_free_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	2900      	cmp	r1, #0
 8001a6e:	d041      	beq.n	8001af4 <_free_r+0x8c>
 8001a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a74:	1f0c      	subs	r4, r1, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfb8      	it	lt
 8001a7a:	18e4      	addlt	r4, r4, r3
 8001a7c:	f000 f8e0 	bl	8001c40 <__malloc_lock>
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <_free_r+0x90>)
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	b933      	cbnz	r3, 8001a94 <_free_r+0x2c>
 8001a86:	6063      	str	r3, [r4, #4]
 8001a88:	6014      	str	r4, [r2, #0]
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a90:	f000 b8dc 	b.w	8001c4c <__malloc_unlock>
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	d908      	bls.n	8001aaa <_free_r+0x42>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	1821      	adds	r1, r4, r0
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	bf01      	itttt	eq
 8001aa0:	6819      	ldreq	r1, [r3, #0]
 8001aa2:	685b      	ldreq	r3, [r3, #4]
 8001aa4:	1809      	addeq	r1, r1, r0
 8001aa6:	6021      	streq	r1, [r4, #0]
 8001aa8:	e7ed      	b.n	8001a86 <_free_r+0x1e>
 8001aaa:	461a      	mov	r2, r3
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	b10b      	cbz	r3, 8001ab4 <_free_r+0x4c>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d9fa      	bls.n	8001aaa <_free_r+0x42>
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	1850      	adds	r0, r2, r1
 8001ab8:	42a0      	cmp	r0, r4
 8001aba:	d10b      	bne.n	8001ad4 <_free_r+0x6c>
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	4401      	add	r1, r0
 8001ac0:	1850      	adds	r0, r2, r1
 8001ac2:	4283      	cmp	r3, r0
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	d1e0      	bne.n	8001a8a <_free_r+0x22>
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	4408      	add	r0, r1
 8001ad0:	6010      	str	r0, [r2, #0]
 8001ad2:	e7da      	b.n	8001a8a <_free_r+0x22>
 8001ad4:	d902      	bls.n	8001adc <_free_r+0x74>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	602b      	str	r3, [r5, #0]
 8001ada:	e7d6      	b.n	8001a8a <_free_r+0x22>
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	1821      	adds	r1, r4, r0
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf04      	itt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	bf04      	itt	eq
 8001aec:	1809      	addeq	r1, r1, r0
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	6054      	str	r4, [r2, #4]
 8001af2:	e7ca      	b.n	8001a8a <_free_r+0x22>
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	bf00      	nop
 8001af8:	2000060c 	.word	0x2000060c

08001afc <sbrk_aligned>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	4e0f      	ldr	r6, [pc, #60]	@ (8001b3c <sbrk_aligned+0x40>)
 8001b00:	460c      	mov	r4, r1
 8001b02:	6831      	ldr	r1, [r6, #0]
 8001b04:	4605      	mov	r5, r0
 8001b06:	b911      	cbnz	r1, 8001b0e <sbrk_aligned+0x12>
 8001b08:	f000 fca0 	bl	800244c <_sbrk_r>
 8001b0c:	6030      	str	r0, [r6, #0]
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 fc9b 	bl	800244c <_sbrk_r>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	d103      	bne.n	8001b22 <sbrk_aligned+0x26>
 8001b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b1e:	4620      	mov	r0, r4
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	1cc4      	adds	r4, r0, #3
 8001b24:	f024 0403 	bic.w	r4, r4, #3
 8001b28:	42a0      	cmp	r0, r4
 8001b2a:	d0f8      	beq.n	8001b1e <sbrk_aligned+0x22>
 8001b2c:	1a21      	subs	r1, r4, r0
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 fc8c 	bl	800244c <_sbrk_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1f2      	bne.n	8001b1e <sbrk_aligned+0x22>
 8001b38:	e7ef      	b.n	8001b1a <sbrk_aligned+0x1e>
 8001b3a:	bf00      	nop
 8001b3c:	20000608 	.word	0x20000608

08001b40 <_malloc_r>:
 8001b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b44:	1ccd      	adds	r5, r1, #3
 8001b46:	f025 0503 	bic.w	r5, r5, #3
 8001b4a:	3508      	adds	r5, #8
 8001b4c:	2d0c      	cmp	r5, #12
 8001b4e:	bf38      	it	cc
 8001b50:	250c      	movcc	r5, #12
 8001b52:	2d00      	cmp	r5, #0
 8001b54:	4606      	mov	r6, r0
 8001b56:	db01      	blt.n	8001b5c <_malloc_r+0x1c>
 8001b58:	42a9      	cmp	r1, r5
 8001b5a:	d904      	bls.n	8001b66 <_malloc_r+0x26>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	6033      	str	r3, [r6, #0]
 8001b60:	2000      	movs	r0, #0
 8001b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c3c <_malloc_r+0xfc>
 8001b6a:	f000 f869 	bl	8001c40 <__malloc_lock>
 8001b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b72:	461c      	mov	r4, r3
 8001b74:	bb44      	cbnz	r4, 8001bc8 <_malloc_r+0x88>
 8001b76:	4629      	mov	r1, r5
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7ff ffbf 	bl	8001afc <sbrk_aligned>
 8001b7e:	1c43      	adds	r3, r0, #1
 8001b80:	4604      	mov	r4, r0
 8001b82:	d158      	bne.n	8001c36 <_malloc_r+0xf6>
 8001b84:	f8d8 4000 	ldr.w	r4, [r8]
 8001b88:	4627      	mov	r7, r4
 8001b8a:	2f00      	cmp	r7, #0
 8001b8c:	d143      	bne.n	8001c16 <_malloc_r+0xd6>
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d04b      	beq.n	8001c2a <_malloc_r+0xea>
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	4639      	mov	r1, r7
 8001b96:	4630      	mov	r0, r6
 8001b98:	eb04 0903 	add.w	r9, r4, r3
 8001b9c:	f000 fc56 	bl	800244c <_sbrk_r>
 8001ba0:	4581      	cmp	r9, r0
 8001ba2:	d142      	bne.n	8001c2a <_malloc_r+0xea>
 8001ba4:	6821      	ldr	r1, [r4, #0]
 8001ba6:	1a6d      	subs	r5, r5, r1
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff ffa6 	bl	8001afc <sbrk_aligned>
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	d03a      	beq.n	8001c2a <_malloc_r+0xea>
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	442b      	add	r3, r5
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	f8d8 3000 	ldr.w	r3, [r8]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	bb62      	cbnz	r2, 8001c1c <_malloc_r+0xdc>
 8001bc2:	f8c8 7000 	str.w	r7, [r8]
 8001bc6:	e00f      	b.n	8001be8 <_malloc_r+0xa8>
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	1b52      	subs	r2, r2, r5
 8001bcc:	d420      	bmi.n	8001c10 <_malloc_r+0xd0>
 8001bce:	2a0b      	cmp	r2, #11
 8001bd0:	d917      	bls.n	8001c02 <_malloc_r+0xc2>
 8001bd2:	1961      	adds	r1, r4, r5
 8001bd4:	42a3      	cmp	r3, r4
 8001bd6:	6025      	str	r5, [r4, #0]
 8001bd8:	bf18      	it	ne
 8001bda:	6059      	strne	r1, [r3, #4]
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	bf08      	it	eq
 8001be0:	f8c8 1000 	streq.w	r1, [r8]
 8001be4:	5162      	str	r2, [r4, r5]
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	4630      	mov	r0, r6
 8001bea:	f000 f82f 	bl	8001c4c <__malloc_unlock>
 8001bee:	f104 000b 	add.w	r0, r4, #11
 8001bf2:	1d23      	adds	r3, r4, #4
 8001bf4:	f020 0007 	bic.w	r0, r0, #7
 8001bf8:	1ac2      	subs	r2, r0, r3
 8001bfa:	bf1c      	itt	ne
 8001bfc:	1a1b      	subne	r3, r3, r0
 8001bfe:	50a3      	strne	r3, [r4, r2]
 8001c00:	e7af      	b.n	8001b62 <_malloc_r+0x22>
 8001c02:	6862      	ldr	r2, [r4, #4]
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	bf0c      	ite	eq
 8001c08:	f8c8 2000 	streq.w	r2, [r8]
 8001c0c:	605a      	strne	r2, [r3, #4]
 8001c0e:	e7eb      	b.n	8001be8 <_malloc_r+0xa8>
 8001c10:	4623      	mov	r3, r4
 8001c12:	6864      	ldr	r4, [r4, #4]
 8001c14:	e7ae      	b.n	8001b74 <_malloc_r+0x34>
 8001c16:	463c      	mov	r4, r7
 8001c18:	687f      	ldr	r7, [r7, #4]
 8001c1a:	e7b6      	b.n	8001b8a <_malloc_r+0x4a>
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	d1fb      	bne.n	8001c1c <_malloc_r+0xdc>
 8001c24:	2300      	movs	r3, #0
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	e7de      	b.n	8001be8 <_malloc_r+0xa8>
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	6033      	str	r3, [r6, #0]
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f000 f80c 	bl	8001c4c <__malloc_unlock>
 8001c34:	e794      	b.n	8001b60 <_malloc_r+0x20>
 8001c36:	6005      	str	r5, [r0, #0]
 8001c38:	e7d6      	b.n	8001be8 <_malloc_r+0xa8>
 8001c3a:	bf00      	nop
 8001c3c:	2000060c 	.word	0x2000060c

08001c40 <__malloc_lock>:
 8001c40:	4801      	ldr	r0, [pc, #4]	@ (8001c48 <__malloc_lock+0x8>)
 8001c42:	f7ff bf0e 	b.w	8001a62 <__retarget_lock_acquire_recursive>
 8001c46:	bf00      	nop
 8001c48:	20000604 	.word	0x20000604

08001c4c <__malloc_unlock>:
 8001c4c:	4801      	ldr	r0, [pc, #4]	@ (8001c54 <__malloc_unlock+0x8>)
 8001c4e:	f7ff bf09 	b.w	8001a64 <__retarget_lock_release_recursive>
 8001c52:	bf00      	nop
 8001c54:	20000604 	.word	0x20000604

08001c58 <__sfputc_r>:
 8001c58:	6893      	ldr	r3, [r2, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	b410      	push	{r4}
 8001c60:	6093      	str	r3, [r2, #8]
 8001c62:	da07      	bge.n	8001c74 <__sfputc_r+0x1c>
 8001c64:	6994      	ldr	r4, [r2, #24]
 8001c66:	42a3      	cmp	r3, r4
 8001c68:	db01      	blt.n	8001c6e <__sfputc_r+0x16>
 8001c6a:	290a      	cmp	r1, #10
 8001c6c:	d102      	bne.n	8001c74 <__sfputc_r+0x1c>
 8001c6e:	bc10      	pop	{r4}
 8001c70:	f7ff bde9 	b.w	8001846 <__swbuf_r>
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	1c58      	adds	r0, r3, #1
 8001c78:	6010      	str	r0, [r2, #0]
 8001c7a:	7019      	strb	r1, [r3, #0]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	bc10      	pop	{r4}
 8001c80:	4770      	bx	lr

08001c82 <__sfputs_r>:
 8001c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c84:	4606      	mov	r6, r0
 8001c86:	460f      	mov	r7, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	18d5      	adds	r5, r2, r3
 8001c8c:	42ac      	cmp	r4, r5
 8001c8e:	d101      	bne.n	8001c94 <__sfputs_r+0x12>
 8001c90:	2000      	movs	r0, #0
 8001c92:	e007      	b.n	8001ca4 <__sfputs_r+0x22>
 8001c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c98:	463a      	mov	r2, r7
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f7ff ffdc 	bl	8001c58 <__sfputc_r>
 8001ca0:	1c43      	adds	r3, r0, #1
 8001ca2:	d1f3      	bne.n	8001c8c <__sfputs_r+0xa>
 8001ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ca8 <_vfiprintf_r>:
 8001ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cac:	460d      	mov	r5, r1
 8001cae:	b09d      	sub	sp, #116	@ 0x74
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	4606      	mov	r6, r0
 8001cb6:	b118      	cbz	r0, 8001cc0 <_vfiprintf_r+0x18>
 8001cb8:	6a03      	ldr	r3, [r0, #32]
 8001cba:	b90b      	cbnz	r3, 8001cc0 <_vfiprintf_r+0x18>
 8001cbc:	f7ff fcda 	bl	8001674 <__sinit>
 8001cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cc2:	07d9      	lsls	r1, r3, #31
 8001cc4:	d405      	bmi.n	8001cd2 <_vfiprintf_r+0x2a>
 8001cc6:	89ab      	ldrh	r3, [r5, #12]
 8001cc8:	059a      	lsls	r2, r3, #22
 8001cca:	d402      	bmi.n	8001cd2 <_vfiprintf_r+0x2a>
 8001ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cce:	f7ff fec8 	bl	8001a62 <__retarget_lock_acquire_recursive>
 8001cd2:	89ab      	ldrh	r3, [r5, #12]
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	d501      	bpl.n	8001cdc <_vfiprintf_r+0x34>
 8001cd8:	692b      	ldr	r3, [r5, #16]
 8001cda:	b99b      	cbnz	r3, 8001d04 <_vfiprintf_r+0x5c>
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff fdf0 	bl	80018c4 <__swsetup_r>
 8001ce4:	b170      	cbz	r0, 8001d04 <_vfiprintf_r+0x5c>
 8001ce6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ce8:	07dc      	lsls	r4, r3, #31
 8001cea:	d504      	bpl.n	8001cf6 <_vfiprintf_r+0x4e>
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	b01d      	add	sp, #116	@ 0x74
 8001cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf6:	89ab      	ldrh	r3, [r5, #12]
 8001cf8:	0598      	lsls	r0, r3, #22
 8001cfa:	d4f7      	bmi.n	8001cec <_vfiprintf_r+0x44>
 8001cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cfe:	f7ff feb1 	bl	8001a64 <__retarget_lock_release_recursive>
 8001d02:	e7f3      	b.n	8001cec <_vfiprintf_r+0x44>
 8001d04:	2300      	movs	r3, #0
 8001d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d08:	2320      	movs	r3, #32
 8001d0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d12:	2330      	movs	r3, #48	@ 0x30
 8001d14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001ec4 <_vfiprintf_r+0x21c>
 8001d18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d1c:	f04f 0901 	mov.w	r9, #1
 8001d20:	4623      	mov	r3, r4
 8001d22:	469a      	mov	sl, r3
 8001d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d28:	b10a      	cbz	r2, 8001d2e <_vfiprintf_r+0x86>
 8001d2a:	2a25      	cmp	r2, #37	@ 0x25
 8001d2c:	d1f9      	bne.n	8001d22 <_vfiprintf_r+0x7a>
 8001d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8001d32:	d00b      	beq.n	8001d4c <_vfiprintf_r+0xa4>
 8001d34:	465b      	mov	r3, fp
 8001d36:	4622      	mov	r2, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff ffa1 	bl	8001c82 <__sfputs_r>
 8001d40:	3001      	adds	r0, #1
 8001d42:	f000 80a7 	beq.w	8001e94 <_vfiprintf_r+0x1ec>
 8001d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d48:	445a      	add	r2, fp
 8001d4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 809f 	beq.w	8001e94 <_vfiprintf_r+0x1ec>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d60:	f10a 0a01 	add.w	sl, sl, #1
 8001d64:	9304      	str	r3, [sp, #16]
 8001d66:	9307      	str	r3, [sp, #28]
 8001d68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d6e:	4654      	mov	r4, sl
 8001d70:	2205      	movs	r2, #5
 8001d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d76:	4853      	ldr	r0, [pc, #332]	@ (8001ec4 <_vfiprintf_r+0x21c>)
 8001d78:	f7fe fa32 	bl	80001e0 <memchr>
 8001d7c:	9a04      	ldr	r2, [sp, #16]
 8001d7e:	b9d8      	cbnz	r0, 8001db8 <_vfiprintf_r+0x110>
 8001d80:	06d1      	lsls	r1, r2, #27
 8001d82:	bf44      	itt	mi
 8001d84:	2320      	movmi	r3, #32
 8001d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d8a:	0713      	lsls	r3, r2, #28
 8001d8c:	bf44      	itt	mi
 8001d8e:	232b      	movmi	r3, #43	@ 0x2b
 8001d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d94:	f89a 3000 	ldrb.w	r3, [sl]
 8001d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d9a:	d015      	beq.n	8001dc8 <_vfiprintf_r+0x120>
 8001d9c:	9a07      	ldr	r2, [sp, #28]
 8001d9e:	4654      	mov	r4, sl
 8001da0:	2000      	movs	r0, #0
 8001da2:	f04f 0c0a 	mov.w	ip, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dac:	3b30      	subs	r3, #48	@ 0x30
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	d94b      	bls.n	8001e4a <_vfiprintf_r+0x1a2>
 8001db2:	b1b0      	cbz	r0, 8001de2 <_vfiprintf_r+0x13a>
 8001db4:	9207      	str	r2, [sp, #28]
 8001db6:	e014      	b.n	8001de2 <_vfiprintf_r+0x13a>
 8001db8:	eba0 0308 	sub.w	r3, r0, r8
 8001dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	9304      	str	r3, [sp, #16]
 8001dc4:	46a2      	mov	sl, r4
 8001dc6:	e7d2      	b.n	8001d6e <_vfiprintf_r+0xc6>
 8001dc8:	9b03      	ldr	r3, [sp, #12]
 8001dca:	1d19      	adds	r1, r3, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	9103      	str	r1, [sp, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bfbb      	ittet	lt
 8001dd4:	425b      	neglt	r3, r3
 8001dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8001dda:	9307      	strge	r3, [sp, #28]
 8001ddc:	9307      	strlt	r3, [sp, #28]
 8001dde:	bfb8      	it	lt
 8001de0:	9204      	strlt	r2, [sp, #16]
 8001de2:	7823      	ldrb	r3, [r4, #0]
 8001de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001de6:	d10a      	bne.n	8001dfe <_vfiprintf_r+0x156>
 8001de8:	7863      	ldrb	r3, [r4, #1]
 8001dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dec:	d132      	bne.n	8001e54 <_vfiprintf_r+0x1ac>
 8001dee:	9b03      	ldr	r3, [sp, #12]
 8001df0:	1d1a      	adds	r2, r3, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	9203      	str	r2, [sp, #12]
 8001df6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001dfa:	3402      	adds	r4, #2
 8001dfc:	9305      	str	r3, [sp, #20]
 8001dfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001ec8 <_vfiprintf_r+0x220>
 8001e02:	7821      	ldrb	r1, [r4, #0]
 8001e04:	2203      	movs	r2, #3
 8001e06:	4650      	mov	r0, sl
 8001e08:	f7fe f9ea 	bl	80001e0 <memchr>
 8001e0c:	b138      	cbz	r0, 8001e1e <_vfiprintf_r+0x176>
 8001e0e:	9b04      	ldr	r3, [sp, #16]
 8001e10:	eba0 000a 	sub.w	r0, r0, sl
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	4082      	lsls	r2, r0
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	3401      	adds	r4, #1
 8001e1c:	9304      	str	r3, [sp, #16]
 8001e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e22:	482a      	ldr	r0, [pc, #168]	@ (8001ecc <_vfiprintf_r+0x224>)
 8001e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e28:	2206      	movs	r2, #6
 8001e2a:	f7fe f9d9 	bl	80001e0 <memchr>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d03f      	beq.n	8001eb2 <_vfiprintf_r+0x20a>
 8001e32:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <_vfiprintf_r+0x228>)
 8001e34:	bb1b      	cbnz	r3, 8001e7e <_vfiprintf_r+0x1d6>
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	3307      	adds	r3, #7
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	3308      	adds	r3, #8
 8001e40:	9303      	str	r3, [sp, #12]
 8001e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e44:	443b      	add	r3, r7
 8001e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e48:	e76a      	b.n	8001d20 <_vfiprintf_r+0x78>
 8001e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e4e:	460c      	mov	r4, r1
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7a8      	b.n	8001da6 <_vfiprintf_r+0xfe>
 8001e54:	2300      	movs	r3, #0
 8001e56:	3401      	adds	r4, #1
 8001e58:	9305      	str	r3, [sp, #20]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0c0a 	mov.w	ip, #10
 8001e60:	4620      	mov	r0, r4
 8001e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e66:	3a30      	subs	r2, #48	@ 0x30
 8001e68:	2a09      	cmp	r2, #9
 8001e6a:	d903      	bls.n	8001e74 <_vfiprintf_r+0x1cc>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0c6      	beq.n	8001dfe <_vfiprintf_r+0x156>
 8001e70:	9105      	str	r1, [sp, #20]
 8001e72:	e7c4      	b.n	8001dfe <_vfiprintf_r+0x156>
 8001e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e78:	4604      	mov	r4, r0
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e7f0      	b.n	8001e60 <_vfiprintf_r+0x1b8>
 8001e7e:	ab03      	add	r3, sp, #12
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	462a      	mov	r2, r5
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <_vfiprintf_r+0x22c>)
 8001e86:	a904      	add	r1, sp, #16
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4607      	mov	r7, r0
 8001e90:	1c78      	adds	r0, r7, #1
 8001e92:	d1d6      	bne.n	8001e42 <_vfiprintf_r+0x19a>
 8001e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e96:	07d9      	lsls	r1, r3, #31
 8001e98:	d405      	bmi.n	8001ea6 <_vfiprintf_r+0x1fe>
 8001e9a:	89ab      	ldrh	r3, [r5, #12]
 8001e9c:	059a      	lsls	r2, r3, #22
 8001e9e:	d402      	bmi.n	8001ea6 <_vfiprintf_r+0x1fe>
 8001ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ea2:	f7ff fddf 	bl	8001a64 <__retarget_lock_release_recursive>
 8001ea6:	89ab      	ldrh	r3, [r5, #12]
 8001ea8:	065b      	lsls	r3, r3, #25
 8001eaa:	f53f af1f 	bmi.w	8001cec <_vfiprintf_r+0x44>
 8001eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001eb0:	e71e      	b.n	8001cf0 <_vfiprintf_r+0x48>
 8001eb2:	ab03      	add	r3, sp, #12
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	462a      	mov	r2, r5
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <_vfiprintf_r+0x22c>)
 8001eba:	a904      	add	r1, sp, #16
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 f879 	bl	8001fb4 <_printf_i>
 8001ec2:	e7e4      	b.n	8001e8e <_vfiprintf_r+0x1e6>
 8001ec4:	080024fa 	.word	0x080024fa
 8001ec8:	08002500 	.word	0x08002500
 8001ecc:	08002504 	.word	0x08002504
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	08001c83 	.word	0x08001c83

08001ed8 <_printf_common>:
 8001ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001edc:	4616      	mov	r6, r2
 8001ede:	4698      	mov	r8, r3
 8001ee0:	688a      	ldr	r2, [r1, #8]
 8001ee2:	690b      	ldr	r3, [r1, #16]
 8001ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bfb8      	it	lt
 8001eec:	4613      	movlt	r3, r2
 8001eee:	6033      	str	r3, [r6, #0]
 8001ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ef4:	4607      	mov	r7, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	b10a      	cbz	r2, 8001efe <_printf_common+0x26>
 8001efa:	3301      	adds	r3, #1
 8001efc:	6033      	str	r3, [r6, #0]
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	0699      	lsls	r1, r3, #26
 8001f02:	bf42      	ittt	mi
 8001f04:	6833      	ldrmi	r3, [r6, #0]
 8001f06:	3302      	addmi	r3, #2
 8001f08:	6033      	strmi	r3, [r6, #0]
 8001f0a:	6825      	ldr	r5, [r4, #0]
 8001f0c:	f015 0506 	ands.w	r5, r5, #6
 8001f10:	d106      	bne.n	8001f20 <_printf_common+0x48>
 8001f12:	f104 0a19 	add.w	sl, r4, #25
 8001f16:	68e3      	ldr	r3, [r4, #12]
 8001f18:	6832      	ldr	r2, [r6, #0]
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	42ab      	cmp	r3, r5
 8001f1e:	dc26      	bgt.n	8001f6e <_printf_common+0x96>
 8001f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	3b00      	subs	r3, #0
 8001f28:	bf18      	it	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	0692      	lsls	r2, r2, #26
 8001f2e:	d42b      	bmi.n	8001f88 <_printf_common+0xb0>
 8001f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f34:	4641      	mov	r1, r8
 8001f36:	4638      	mov	r0, r7
 8001f38:	47c8      	blx	r9
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	d01e      	beq.n	8001f7c <_printf_common+0xa4>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	6922      	ldr	r2, [r4, #16]
 8001f42:	f003 0306 	and.w	r3, r3, #6
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf02      	ittt	eq
 8001f4a:	68e5      	ldreq	r5, [r4, #12]
 8001f4c:	6833      	ldreq	r3, [r6, #0]
 8001f4e:	1aed      	subeq	r5, r5, r3
 8001f50:	68a3      	ldr	r3, [r4, #8]
 8001f52:	bf0c      	ite	eq
 8001f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f58:	2500      	movne	r5, #0
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	bfc4      	itt	gt
 8001f5e:	1a9b      	subgt	r3, r3, r2
 8001f60:	18ed      	addgt	r5, r5, r3
 8001f62:	2600      	movs	r6, #0
 8001f64:	341a      	adds	r4, #26
 8001f66:	42b5      	cmp	r5, r6
 8001f68:	d11a      	bne.n	8001fa0 <_printf_common+0xc8>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	e008      	b.n	8001f80 <_printf_common+0xa8>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	4652      	mov	r2, sl
 8001f72:	4641      	mov	r1, r8
 8001f74:	4638      	mov	r0, r7
 8001f76:	47c8      	blx	r9
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d103      	bne.n	8001f84 <_printf_common+0xac>
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f84:	3501      	adds	r5, #1
 8001f86:	e7c6      	b.n	8001f16 <_printf_common+0x3e>
 8001f88:	18e1      	adds	r1, r4, r3
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	2030      	movs	r0, #48	@ 0x30
 8001f8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f92:	4422      	add	r2, r4
 8001f94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	e7c7      	b.n	8001f30 <_printf_common+0x58>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	4638      	mov	r0, r7
 8001fa8:	47c8      	blx	r9
 8001faa:	3001      	adds	r0, #1
 8001fac:	d0e6      	beq.n	8001f7c <_printf_common+0xa4>
 8001fae:	3601      	adds	r6, #1
 8001fb0:	e7d9      	b.n	8001f66 <_printf_common+0x8e>
	...

08001fb4 <_printf_i>:
 8001fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fb8:	7e0f      	ldrb	r7, [r1, #24]
 8001fba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fbc:	2f78      	cmp	r7, #120	@ 0x78
 8001fbe:	4691      	mov	r9, r2
 8001fc0:	4680      	mov	r8, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	469a      	mov	sl, r3
 8001fc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fca:	d807      	bhi.n	8001fdc <_printf_i+0x28>
 8001fcc:	2f62      	cmp	r7, #98	@ 0x62
 8001fce:	d80a      	bhi.n	8001fe6 <_printf_i+0x32>
 8001fd0:	2f00      	cmp	r7, #0
 8001fd2:	f000 80d2 	beq.w	800217a <_printf_i+0x1c6>
 8001fd6:	2f58      	cmp	r7, #88	@ 0x58
 8001fd8:	f000 80b9 	beq.w	800214e <_printf_i+0x19a>
 8001fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fe4:	e03a      	b.n	800205c <_printf_i+0xa8>
 8001fe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fea:	2b15      	cmp	r3, #21
 8001fec:	d8f6      	bhi.n	8001fdc <_printf_i+0x28>
 8001fee:	a101      	add	r1, pc, #4	@ (adr r1, 8001ff4 <_printf_i+0x40>)
 8001ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ff4:	0800204d 	.word	0x0800204d
 8001ff8:	08002061 	.word	0x08002061
 8001ffc:	08001fdd 	.word	0x08001fdd
 8002000:	08001fdd 	.word	0x08001fdd
 8002004:	08001fdd 	.word	0x08001fdd
 8002008:	08001fdd 	.word	0x08001fdd
 800200c:	08002061 	.word	0x08002061
 8002010:	08001fdd 	.word	0x08001fdd
 8002014:	08001fdd 	.word	0x08001fdd
 8002018:	08001fdd 	.word	0x08001fdd
 800201c:	08001fdd 	.word	0x08001fdd
 8002020:	08002161 	.word	0x08002161
 8002024:	0800208b 	.word	0x0800208b
 8002028:	0800211b 	.word	0x0800211b
 800202c:	08001fdd 	.word	0x08001fdd
 8002030:	08001fdd 	.word	0x08001fdd
 8002034:	08002183 	.word	0x08002183
 8002038:	08001fdd 	.word	0x08001fdd
 800203c:	0800208b 	.word	0x0800208b
 8002040:	08001fdd 	.word	0x08001fdd
 8002044:	08001fdd 	.word	0x08001fdd
 8002048:	08002123 	.word	0x08002123
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6032      	str	r2, [r6, #0]
 8002054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800205c:	2301      	movs	r3, #1
 800205e:	e09d      	b.n	800219c <_printf_i+0x1e8>
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	6820      	ldr	r0, [r4, #0]
 8002064:	1d19      	adds	r1, r3, #4
 8002066:	6031      	str	r1, [r6, #0]
 8002068:	0606      	lsls	r6, r0, #24
 800206a:	d501      	bpl.n	8002070 <_printf_i+0xbc>
 800206c:	681d      	ldr	r5, [r3, #0]
 800206e:	e003      	b.n	8002078 <_printf_i+0xc4>
 8002070:	0645      	lsls	r5, r0, #25
 8002072:	d5fb      	bpl.n	800206c <_printf_i+0xb8>
 8002074:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002078:	2d00      	cmp	r5, #0
 800207a:	da03      	bge.n	8002084 <_printf_i+0xd0>
 800207c:	232d      	movs	r3, #45	@ 0x2d
 800207e:	426d      	negs	r5, r5
 8002080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002084:	4859      	ldr	r0, [pc, #356]	@ (80021ec <_printf_i+0x238>)
 8002086:	230a      	movs	r3, #10
 8002088:	e011      	b.n	80020ae <_printf_i+0xfa>
 800208a:	6821      	ldr	r1, [r4, #0]
 800208c:	6833      	ldr	r3, [r6, #0]
 800208e:	0608      	lsls	r0, r1, #24
 8002090:	f853 5b04 	ldr.w	r5, [r3], #4
 8002094:	d402      	bmi.n	800209c <_printf_i+0xe8>
 8002096:	0649      	lsls	r1, r1, #25
 8002098:	bf48      	it	mi
 800209a:	b2ad      	uxthmi	r5, r5
 800209c:	2f6f      	cmp	r7, #111	@ 0x6f
 800209e:	4853      	ldr	r0, [pc, #332]	@ (80021ec <_printf_i+0x238>)
 80020a0:	6033      	str	r3, [r6, #0]
 80020a2:	bf14      	ite	ne
 80020a4:	230a      	movne	r3, #10
 80020a6:	2308      	moveq	r3, #8
 80020a8:	2100      	movs	r1, #0
 80020aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020ae:	6866      	ldr	r6, [r4, #4]
 80020b0:	60a6      	str	r6, [r4, #8]
 80020b2:	2e00      	cmp	r6, #0
 80020b4:	bfa2      	ittt	ge
 80020b6:	6821      	ldrge	r1, [r4, #0]
 80020b8:	f021 0104 	bicge.w	r1, r1, #4
 80020bc:	6021      	strge	r1, [r4, #0]
 80020be:	b90d      	cbnz	r5, 80020c4 <_printf_i+0x110>
 80020c0:	2e00      	cmp	r6, #0
 80020c2:	d04b      	beq.n	800215c <_printf_i+0x1a8>
 80020c4:	4616      	mov	r6, r2
 80020c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80020ca:	fb03 5711 	mls	r7, r3, r1, r5
 80020ce:	5dc7      	ldrb	r7, [r0, r7]
 80020d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020d4:	462f      	mov	r7, r5
 80020d6:	42bb      	cmp	r3, r7
 80020d8:	460d      	mov	r5, r1
 80020da:	d9f4      	bls.n	80020c6 <_printf_i+0x112>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d10b      	bne.n	80020f8 <_printf_i+0x144>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	07df      	lsls	r7, r3, #31
 80020e4:	d508      	bpl.n	80020f8 <_printf_i+0x144>
 80020e6:	6923      	ldr	r3, [r4, #16]
 80020e8:	6861      	ldr	r1, [r4, #4]
 80020ea:	4299      	cmp	r1, r3
 80020ec:	bfde      	ittt	le
 80020ee:	2330      	movle	r3, #48	@ 0x30
 80020f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020f8:	1b92      	subs	r2, r2, r6
 80020fa:	6122      	str	r2, [r4, #16]
 80020fc:	f8cd a000 	str.w	sl, [sp]
 8002100:	464b      	mov	r3, r9
 8002102:	aa03      	add	r2, sp, #12
 8002104:	4621      	mov	r1, r4
 8002106:	4640      	mov	r0, r8
 8002108:	f7ff fee6 	bl	8001ed8 <_printf_common>
 800210c:	3001      	adds	r0, #1
 800210e:	d14a      	bne.n	80021a6 <_printf_i+0x1f2>
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	b004      	add	sp, #16
 8002116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	4833      	ldr	r0, [pc, #204]	@ (80021f0 <_printf_i+0x23c>)
 8002124:	2778      	movs	r7, #120	@ 0x78
 8002126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	6831      	ldr	r1, [r6, #0]
 800212e:	061f      	lsls	r7, r3, #24
 8002130:	f851 5b04 	ldr.w	r5, [r1], #4
 8002134:	d402      	bmi.n	800213c <_printf_i+0x188>
 8002136:	065f      	lsls	r7, r3, #25
 8002138:	bf48      	it	mi
 800213a:	b2ad      	uxthmi	r5, r5
 800213c:	6031      	str	r1, [r6, #0]
 800213e:	07d9      	lsls	r1, r3, #31
 8002140:	bf44      	itt	mi
 8002142:	f043 0320 	orrmi.w	r3, r3, #32
 8002146:	6023      	strmi	r3, [r4, #0]
 8002148:	b11d      	cbz	r5, 8002152 <_printf_i+0x19e>
 800214a:	2310      	movs	r3, #16
 800214c:	e7ac      	b.n	80020a8 <_printf_i+0xf4>
 800214e:	4827      	ldr	r0, [pc, #156]	@ (80021ec <_printf_i+0x238>)
 8002150:	e7e9      	b.n	8002126 <_printf_i+0x172>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	f023 0320 	bic.w	r3, r3, #32
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	e7f6      	b.n	800214a <_printf_i+0x196>
 800215c:	4616      	mov	r6, r2
 800215e:	e7bd      	b.n	80020dc <_printf_i+0x128>
 8002160:	6833      	ldr	r3, [r6, #0]
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	6961      	ldr	r1, [r4, #20]
 8002166:	1d18      	adds	r0, r3, #4
 8002168:	6030      	str	r0, [r6, #0]
 800216a:	062e      	lsls	r6, r5, #24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	d501      	bpl.n	8002174 <_printf_i+0x1c0>
 8002170:	6019      	str	r1, [r3, #0]
 8002172:	e002      	b.n	800217a <_printf_i+0x1c6>
 8002174:	0668      	lsls	r0, r5, #25
 8002176:	d5fb      	bpl.n	8002170 <_printf_i+0x1bc>
 8002178:	8019      	strh	r1, [r3, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	6123      	str	r3, [r4, #16]
 800217e:	4616      	mov	r6, r2
 8002180:	e7bc      	b.n	80020fc <_printf_i+0x148>
 8002182:	6833      	ldr	r3, [r6, #0]
 8002184:	1d1a      	adds	r2, r3, #4
 8002186:	6032      	str	r2, [r6, #0]
 8002188:	681e      	ldr	r6, [r3, #0]
 800218a:	6862      	ldr	r2, [r4, #4]
 800218c:	2100      	movs	r1, #0
 800218e:	4630      	mov	r0, r6
 8002190:	f7fe f826 	bl	80001e0 <memchr>
 8002194:	b108      	cbz	r0, 800219a <_printf_i+0x1e6>
 8002196:	1b80      	subs	r0, r0, r6
 8002198:	6060      	str	r0, [r4, #4]
 800219a:	6863      	ldr	r3, [r4, #4]
 800219c:	6123      	str	r3, [r4, #16]
 800219e:	2300      	movs	r3, #0
 80021a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021a4:	e7aa      	b.n	80020fc <_printf_i+0x148>
 80021a6:	6923      	ldr	r3, [r4, #16]
 80021a8:	4632      	mov	r2, r6
 80021aa:	4649      	mov	r1, r9
 80021ac:	4640      	mov	r0, r8
 80021ae:	47d0      	blx	sl
 80021b0:	3001      	adds	r0, #1
 80021b2:	d0ad      	beq.n	8002110 <_printf_i+0x15c>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	079b      	lsls	r3, r3, #30
 80021b8:	d413      	bmi.n	80021e2 <_printf_i+0x22e>
 80021ba:	68e0      	ldr	r0, [r4, #12]
 80021bc:	9b03      	ldr	r3, [sp, #12]
 80021be:	4298      	cmp	r0, r3
 80021c0:	bfb8      	it	lt
 80021c2:	4618      	movlt	r0, r3
 80021c4:	e7a6      	b.n	8002114 <_printf_i+0x160>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4632      	mov	r2, r6
 80021ca:	4649      	mov	r1, r9
 80021cc:	4640      	mov	r0, r8
 80021ce:	47d0      	blx	sl
 80021d0:	3001      	adds	r0, #1
 80021d2:	d09d      	beq.n	8002110 <_printf_i+0x15c>
 80021d4:	3501      	adds	r5, #1
 80021d6:	68e3      	ldr	r3, [r4, #12]
 80021d8:	9903      	ldr	r1, [sp, #12]
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	42ab      	cmp	r3, r5
 80021de:	dcf2      	bgt.n	80021c6 <_printf_i+0x212>
 80021e0:	e7eb      	b.n	80021ba <_printf_i+0x206>
 80021e2:	2500      	movs	r5, #0
 80021e4:	f104 0619 	add.w	r6, r4, #25
 80021e8:	e7f5      	b.n	80021d6 <_printf_i+0x222>
 80021ea:	bf00      	nop
 80021ec:	0800250b 	.word	0x0800250b
 80021f0:	0800251c 	.word	0x0800251c

080021f4 <__sflush_r>:
 80021f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	0716      	lsls	r6, r2, #28
 80021fc:	4605      	mov	r5, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	d454      	bmi.n	80022ac <__sflush_r+0xb8>
 8002202:	684b      	ldr	r3, [r1, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	dc02      	bgt.n	800220e <__sflush_r+0x1a>
 8002208:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	dd48      	ble.n	80022a0 <__sflush_r+0xac>
 800220e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002210:	2e00      	cmp	r6, #0
 8002212:	d045      	beq.n	80022a0 <__sflush_r+0xac>
 8002214:	2300      	movs	r3, #0
 8002216:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800221a:	682f      	ldr	r7, [r5, #0]
 800221c:	6a21      	ldr	r1, [r4, #32]
 800221e:	602b      	str	r3, [r5, #0]
 8002220:	d030      	beq.n	8002284 <__sflush_r+0x90>
 8002222:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002224:	89a3      	ldrh	r3, [r4, #12]
 8002226:	0759      	lsls	r1, r3, #29
 8002228:	d505      	bpl.n	8002236 <__sflush_r+0x42>
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002230:	b10b      	cbz	r3, 8002236 <__sflush_r+0x42>
 8002232:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002234:	1ad2      	subs	r2, r2, r3
 8002236:	2300      	movs	r3, #0
 8002238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800223a:	6a21      	ldr	r1, [r4, #32]
 800223c:	4628      	mov	r0, r5
 800223e:	47b0      	blx	r6
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	89a3      	ldrh	r3, [r4, #12]
 8002244:	d106      	bne.n	8002254 <__sflush_r+0x60>
 8002246:	6829      	ldr	r1, [r5, #0]
 8002248:	291d      	cmp	r1, #29
 800224a:	d82b      	bhi.n	80022a4 <__sflush_r+0xb0>
 800224c:	4a28      	ldr	r2, [pc, #160]	@ (80022f0 <__sflush_r+0xfc>)
 800224e:	410a      	asrs	r2, r1
 8002250:	07d6      	lsls	r6, r2, #31
 8002252:	d427      	bmi.n	80022a4 <__sflush_r+0xb0>
 8002254:	2200      	movs	r2, #0
 8002256:	6062      	str	r2, [r4, #4]
 8002258:	04d9      	lsls	r1, r3, #19
 800225a:	6922      	ldr	r2, [r4, #16]
 800225c:	6022      	str	r2, [r4, #0]
 800225e:	d504      	bpl.n	800226a <__sflush_r+0x76>
 8002260:	1c42      	adds	r2, r0, #1
 8002262:	d101      	bne.n	8002268 <__sflush_r+0x74>
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	b903      	cbnz	r3, 800226a <__sflush_r+0x76>
 8002268:	6560      	str	r0, [r4, #84]	@ 0x54
 800226a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800226c:	602f      	str	r7, [r5, #0]
 800226e:	b1b9      	cbz	r1, 80022a0 <__sflush_r+0xac>
 8002270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002274:	4299      	cmp	r1, r3
 8002276:	d002      	beq.n	800227e <__sflush_r+0x8a>
 8002278:	4628      	mov	r0, r5
 800227a:	f7ff fbf5 	bl	8001a68 <_free_r>
 800227e:	2300      	movs	r3, #0
 8002280:	6363      	str	r3, [r4, #52]	@ 0x34
 8002282:	e00d      	b.n	80022a0 <__sflush_r+0xac>
 8002284:	2301      	movs	r3, #1
 8002286:	4628      	mov	r0, r5
 8002288:	47b0      	blx	r6
 800228a:	4602      	mov	r2, r0
 800228c:	1c50      	adds	r0, r2, #1
 800228e:	d1c9      	bne.n	8002224 <__sflush_r+0x30>
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0c6      	beq.n	8002224 <__sflush_r+0x30>
 8002296:	2b1d      	cmp	r3, #29
 8002298:	d001      	beq.n	800229e <__sflush_r+0xaa>
 800229a:	2b16      	cmp	r3, #22
 800229c:	d11d      	bne.n	80022da <__sflush_r+0xe6>
 800229e:	602f      	str	r7, [r5, #0]
 80022a0:	2000      	movs	r0, #0
 80022a2:	e021      	b.n	80022e8 <__sflush_r+0xf4>
 80022a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	e01a      	b.n	80022e2 <__sflush_r+0xee>
 80022ac:	690f      	ldr	r7, [r1, #16]
 80022ae:	2f00      	cmp	r7, #0
 80022b0:	d0f6      	beq.n	80022a0 <__sflush_r+0xac>
 80022b2:	0793      	lsls	r3, r2, #30
 80022b4:	680e      	ldr	r6, [r1, #0]
 80022b6:	bf08      	it	eq
 80022b8:	694b      	ldreq	r3, [r1, #20]
 80022ba:	600f      	str	r7, [r1, #0]
 80022bc:	bf18      	it	ne
 80022be:	2300      	movne	r3, #0
 80022c0:	1bf6      	subs	r6, r6, r7
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	2e00      	cmp	r6, #0
 80022c6:	ddeb      	ble.n	80022a0 <__sflush_r+0xac>
 80022c8:	6a21      	ldr	r1, [r4, #32]
 80022ca:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80022ce:	4633      	mov	r3, r6
 80022d0:	463a      	mov	r2, r7
 80022d2:	4628      	mov	r0, r5
 80022d4:	47e0      	blx	ip
 80022d6:	2800      	cmp	r0, #0
 80022d8:	dc07      	bgt.n	80022ea <__sflush_r+0xf6>
 80022da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022e2:	81a3      	strh	r3, [r4, #12]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ea:	4407      	add	r7, r0
 80022ec:	1a36      	subs	r6, r6, r0
 80022ee:	e7e9      	b.n	80022c4 <__sflush_r+0xd0>
 80022f0:	dfbffffe 	.word	0xdfbffffe

080022f4 <_fflush_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	690b      	ldr	r3, [r1, #16]
 80022f8:	4605      	mov	r5, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	b913      	cbnz	r3, 8002304 <_fflush_r+0x10>
 80022fe:	2500      	movs	r5, #0
 8002300:	4628      	mov	r0, r5
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	b118      	cbz	r0, 800230e <_fflush_r+0x1a>
 8002306:	6a03      	ldr	r3, [r0, #32]
 8002308:	b90b      	cbnz	r3, 800230e <_fflush_r+0x1a>
 800230a:	f7ff f9b3 	bl	8001674 <__sinit>
 800230e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f3      	beq.n	80022fe <_fflush_r+0xa>
 8002316:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002318:	07d0      	lsls	r0, r2, #31
 800231a:	d404      	bmi.n	8002326 <_fflush_r+0x32>
 800231c:	0599      	lsls	r1, r3, #22
 800231e:	d402      	bmi.n	8002326 <_fflush_r+0x32>
 8002320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002322:	f7ff fb9e 	bl	8001a62 <__retarget_lock_acquire_recursive>
 8002326:	4628      	mov	r0, r5
 8002328:	4621      	mov	r1, r4
 800232a:	f7ff ff63 	bl	80021f4 <__sflush_r>
 800232e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002330:	07da      	lsls	r2, r3, #31
 8002332:	4605      	mov	r5, r0
 8002334:	d4e4      	bmi.n	8002300 <_fflush_r+0xc>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	059b      	lsls	r3, r3, #22
 800233a:	d4e1      	bmi.n	8002300 <_fflush_r+0xc>
 800233c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800233e:	f7ff fb91 	bl	8001a64 <__retarget_lock_release_recursive>
 8002342:	e7dd      	b.n	8002300 <_fflush_r+0xc>

08002344 <__swhatbuf_r>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	460c      	mov	r4, r1
 8002348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234c:	2900      	cmp	r1, #0
 800234e:	b096      	sub	sp, #88	@ 0x58
 8002350:	4615      	mov	r5, r2
 8002352:	461e      	mov	r6, r3
 8002354:	da0d      	bge.n	8002372 <__swhatbuf_r+0x2e>
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	bf14      	ite	ne
 8002362:	2340      	movne	r3, #64	@ 0x40
 8002364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002368:	2000      	movs	r0, #0
 800236a:	6031      	str	r1, [r6, #0]
 800236c:	602b      	str	r3, [r5, #0]
 800236e:	b016      	add	sp, #88	@ 0x58
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	466a      	mov	r2, sp
 8002374:	f000 f848 	bl	8002408 <_fstat_r>
 8002378:	2800      	cmp	r0, #0
 800237a:	dbec      	blt.n	8002356 <__swhatbuf_r+0x12>
 800237c:	9901      	ldr	r1, [sp, #4]
 800237e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002386:	4259      	negs	r1, r3
 8002388:	4159      	adcs	r1, r3
 800238a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800238e:	e7eb      	b.n	8002368 <__swhatbuf_r+0x24>

08002390 <__smakebuf_r>:
 8002390:	898b      	ldrh	r3, [r1, #12]
 8002392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002394:	079d      	lsls	r5, r3, #30
 8002396:	4606      	mov	r6, r0
 8002398:	460c      	mov	r4, r1
 800239a:	d507      	bpl.n	80023ac <__smakebuf_r+0x1c>
 800239c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	6123      	str	r3, [r4, #16]
 80023a4:	2301      	movs	r3, #1
 80023a6:	6163      	str	r3, [r4, #20]
 80023a8:	b003      	add	sp, #12
 80023aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ac:	ab01      	add	r3, sp, #4
 80023ae:	466a      	mov	r2, sp
 80023b0:	f7ff ffc8 	bl	8002344 <__swhatbuf_r>
 80023b4:	9f00      	ldr	r7, [sp, #0]
 80023b6:	4605      	mov	r5, r0
 80023b8:	4639      	mov	r1, r7
 80023ba:	4630      	mov	r0, r6
 80023bc:	f7ff fbc0 	bl	8001b40 <_malloc_r>
 80023c0:	b948      	cbnz	r0, 80023d6 <__smakebuf_r+0x46>
 80023c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c6:	059a      	lsls	r2, r3, #22
 80023c8:	d4ee      	bmi.n	80023a8 <__smakebuf_r+0x18>
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	81a3      	strh	r3, [r4, #12]
 80023d4:	e7e2      	b.n	800239c <__smakebuf_r+0xc>
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	6020      	str	r0, [r4, #0]
 80023da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023de:	81a3      	strh	r3, [r4, #12]
 80023e0:	9b01      	ldr	r3, [sp, #4]
 80023e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80023e6:	b15b      	cbz	r3, 8002400 <__smakebuf_r+0x70>
 80023e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ec:	4630      	mov	r0, r6
 80023ee:	f000 f81d 	bl	800242c <_isatty_r>
 80023f2:	b128      	cbz	r0, 8002400 <__smakebuf_r+0x70>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	89a3      	ldrh	r3, [r4, #12]
 8002402:	431d      	orrs	r5, r3
 8002404:	81a5      	strh	r5, [r4, #12]
 8002406:	e7cf      	b.n	80023a8 <__smakebuf_r+0x18>

08002408 <_fstat_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4d07      	ldr	r5, [pc, #28]	@ (8002428 <_fstat_r+0x20>)
 800240c:	2300      	movs	r3, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	f7fe f89f 	bl	8000558 <_fstat>
 800241a:	1c43      	adds	r3, r0, #1
 800241c:	d102      	bne.n	8002424 <_fstat_r+0x1c>
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	b103      	cbz	r3, 8002424 <_fstat_r+0x1c>
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	bf00      	nop
 8002428:	20000600 	.word	0x20000600

0800242c <_isatty_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4d06      	ldr	r5, [pc, #24]	@ (8002448 <_isatty_r+0x1c>)
 8002430:	2300      	movs	r3, #0
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	f7fe f89d 	bl	8000576 <_isatty>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_isatty_r+0x1a>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	b103      	cbz	r3, 8002446 <_isatty_r+0x1a>
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	20000600 	.word	0x20000600

0800244c <_sbrk_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4d06      	ldr	r5, [pc, #24]	@ (8002468 <_sbrk_r+0x1c>)
 8002450:	2300      	movs	r3, #0
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	f7fe f8a4 	bl	80005a4 <_sbrk>
 800245c:	1c43      	adds	r3, r0, #1
 800245e:	d102      	bne.n	8002466 <_sbrk_r+0x1a>
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	b103      	cbz	r3, 8002466 <_sbrk_r+0x1a>
 8002464:	6023      	str	r3, [r4, #0]
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	20000600 	.word	0x20000600

0800246c <_init>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr

08002478 <_fini>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr
