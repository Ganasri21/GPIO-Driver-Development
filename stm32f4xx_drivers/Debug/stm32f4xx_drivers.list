
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002188  08002188  00003188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002274  08002274  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002274  08002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800227c  0800227c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002280  08002280  00003280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002284  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ef0  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000793  00000000  00000000  00005f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00006710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c4  00000000  00000000  00006980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035f3  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cd2  00000000  00000000  0000a137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c0db  00000000  00000000  0000ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00018ee4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000110c  00000000  00000000  00018f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0001a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002170 	.word	0x08002170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002170 	.word	0x08002170

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:

//Arduino LED
#define LED_PIN          8

void delay(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	0003d08f 	.word	0x0003d08f

080002ac <SPI2_GPIOInits>:
 * PB12 --> NSS
 * ALT function mode - 5
 */

void SPI2_GPIOInits(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002b2:	4b25      	ldr	r3, [pc, #148]	@ (8000348 <SPI2_GPIOInits+0x9c>)
 80002b4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002b6:	2302      	movs	r3, #2
 80002b8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002ba:	2305      	movs	r3, #5
 80002bc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002be:	2300      	movs	r3, #0
 80002c0:	733b      	strb	r3, [r7, #12]
	// Open drain configuration - not req for SPI, but it is needed for I2C as the specification says it
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c2:	2300      	movs	r3, #0
 80002c4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c6:	2302      	movs	r3, #2
 80002c8:	72bb      	strb	r3, [r7, #10]

	// always enable the clock before making changes to it!!!!!
		GPIO_PeriClockControl(SPIPins.pGPIOx, ENABLE);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2101      	movs	r1, #1
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fbaa 	bl	8000a28 <GPIO_PeriClockControl>
		SPIPins.pGPIOx->MODER   &= 0x00000000;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
		SPIPins.pGPIOx->OSPEEDR &= 0x00000000;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
		SPIPins.pGPIOx->OTYPER  &= 0x00000000;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
		SPIPins.pGPIOx->PUPDR   &= 0x00000000;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
		SPIPins.pGPIOx->AFR[0]  &= 0x00000000;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
		SPIPins.pGPIOx->AFR[1]  &= 0x00000000;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	@ 0x24


	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000310:	230d      	movs	r3, #13
 8000312:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fc6e 	bl	8000bf8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800031c:	230f      	movs	r3, #15
 800031e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc68 	bl	8000bf8 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000328:	230e      	movs	r3, #14
 800032a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fc62 	bl	8000bf8 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000334:	230c      	movs	r3, #12
 8000336:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fc5c 	bl	8000bf8 <GPIO_Init>
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40020400 	.word	0x40020400

0800034c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <SPI2_Inits+0x38>)
 8000354:	603b      	str	r3, [r7, #0]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000356:	2301      	movs	r3, #1
 8000358:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800035a:	2301      	movs	r3, #1
 800035c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 800035e:	2304      	movs	r3, #4
 8000360:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000362:	2300      	movs	r3, #0
 8000364:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800036a:	2300      	movs	r3, #0
 800036c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI;   // H/W slave Mgt enabled for NSS pin
 800036e:	2300      	movs	r3, #0
 8000370:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000372:	463b      	mov	r3, r7
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fe65 	bl	8001044 <SPI_Init>
}
 800037a:	bf00      	nop
 800037c:	3720      	adds	r7, #32
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40003800 	.word	0x40003800

08000388 <GPIO_ButtonInit>:

// If no slave - no need of MISO & NSS

void GPIO_ButtonInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;
	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800038e:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <GPIO_ButtonInit+0x9c>)
 8000390:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000392:	2300      	movs	r3, #0
 8000394:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000396:	2300      	movs	r3, #0
 8000398:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800039a:	2302      	movs	r3, #2
 800039c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800039e:	2300      	movs	r3, #0
 80003a0:	74fb      	strb	r3, [r7, #19]

	// always enable the clock before making changes to it!!!!!
		GPIO_PeriClockControl(GPIOBtn.pGPIOx, ENABLE);
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2101      	movs	r1, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fb3e 	bl	8000a28 <GPIO_PeriClockControl>
//		GPIOBtn.pGPIOx->MODER   = 0x00000000;
		GPIOBtn.pGPIOx->OSPEEDR = 0x00000000;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
		GPIOBtn.pGPIOx->OTYPER  = 0x00000000;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
		GPIOBtn.pGPIOx->PUPDR   = 0x00000000;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
		GPIOBtn.pGPIOx->AFR[0]  = 0x00000000;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
		GPIOBtn.pGPIOx->AFR[1]  = 0x00000000;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	@ 0x24


	GPIO_Init(&GPIOBtn);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fc12 	bl	8000bf8 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <GPIO_ButtonInit+0xa0>)
 80003d6:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80003d8:	230c      	movs	r3, #12
 80003da:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80003dc:	2301      	movs	r3, #1
 80003de:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003e0:	2302      	movs	r3, #2
 80003e2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80003e4:	2301      	movs	r3, #1
 80003e6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003e8:	2300      	movs	r3, #0
 80003ea:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GpioLed.pGPIOx, ENABLE);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2101      	movs	r1, #1
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fb19 	bl	8000a28 <GPIO_PeriClockControl>
//	GPIO_PeriClockControl(GPIOD,ENABLE);

//	GpioLed.pGPIOx->MODER   &= 0x00000000;
	GpioLed.pGPIOx->OSPEEDR = 0x00000000;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	GpioLed.pGPIOx->OTYPER  = 0x00000000;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
	GpioLed.pGPIOx->PUPDR   = 0x00000000;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
	GpioLed.pGPIOx->AFR[0]  = 0x00000000;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	621a      	str	r2, [r3, #32]
	GpioLed.pGPIOx->AFR[1]  = 0x00000000;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	@ 0x24


	GPIO_Init(&GpioLed);
 8000414:	463b      	mov	r3, r7
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fbee 	bl	8000bf8 <GPIO_Init>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40020000 	.word	0x40020000
 8000428:	40020c00 	.word	0x40020c00

0800042c <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == (uint8_t) 0xF5)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2bf5      	cmp	r3, #245	@ 0xf5
 800043a:	d101      	bne.n	8000440 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <SPI_VerifyResponse+0x16>
	}
	return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <main>:

int main(void)
{
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b08e      	sub	sp, #56	@ 0x38
 8000450:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000452:	23ff      	movs	r3, #255	@ 0xff
 8000454:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 8000458:	48b1      	ldr	r0, [pc, #708]	@ (8000720 <main+0x2d4>)
 800045a:	f001 f82b 	bl	80014b4 <puts>

	GPIO_ButtonInit();
 800045e:	f7ff ff93 	bl	8000388 <GPIO_ButtonInit>

	SPI2_GPIOInits();  // func to initialize GPIO pins to behave as SPI2 pins
 8000462:	f7ff ff23 	bl	80002ac <SPI2_GPIOInits>

	SPI2_Inits();  // func for peripheral configuration
 8000466:	f7ff ff71 	bl	800034c <SPI2_Inits>

	printf("SPI Init. done\n");
 800046a:	48ae      	ldr	r0, [pc, #696]	@ (8000724 <main+0x2d8>)
 800046c:	f001 f822 	bl	80014b4 <puts>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000470:	2101      	movs	r1, #1
 8000472:	48ad      	ldr	r0, [pc, #692]	@ (8000728 <main+0x2dc>)
 8000474:	f000 fed8 	bl	8001228 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000478:	bf00      	nop
 800047a:	2100      	movs	r1, #0
 800047c:	48ab      	ldr	r0, [pc, #684]	@ (800072c <main+0x2e0>)
 800047e:	f000 fd5b 	bl	8000f38 <GPIO_ReadFromInputPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0f8      	beq.n	800047a <main+0x2e>

		delay(); // to avoid debouncing issue
 8000488:	f7ff fefa 	bl	8000280 <delay>

		// enable SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 800048c:	2101      	movs	r1, #1
 800048e:	48a6      	ldr	r0, [pc, #664]	@ (8000728 <main+0x2dc>)
 8000490:	f000 feaf 	bl	80011f2 <SPI_PeripheralControl>

		//1. CMD_LED_CTRL <pin no(1)>  <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000494:	2350      	movs	r3, #80	@ 0x50
 8000496:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 800049a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800049e:	2201      	movs	r2, #1
 80004a0:	4619      	mov	r1, r3
 80004a2:	48a1      	ldr	r0, [pc, #644]	@ (8000728 <main+0x2dc>)
 80004a4:	f000 fe37 	bl	8001116 <SPI_SendData>
		 * in Rx buffer of the master and RXNE flag is set.
		 * So, dummy read is done to clear the flag
		 */

		//To do dummy read to clear off RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004a8:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	489d      	ldr	r0, [pc, #628]	@ (8000728 <main+0x2dc>)
 80004b2:	f000 fe67 	bl	8001184 <SPI_ReceiveData>


		// send some dummy bits (1 byte) to fetch response from slave - "Shift register logic"
		SPI_SendData(SPI2, &dummy_write, 1);
 80004b6:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	489a      	ldr	r0, [pc, #616]	@ (8000728 <main+0x2dc>)
 80004c0:	f000 fe29 	bl	8001116 <SPI_SendData>

		// read the ack byte received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80004c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	4896      	ldr	r0, [pc, #600]	@ (8000728 <main+0x2dc>)
 80004ce:	f000 fe59 	bl	8001184 <SPI_ReceiveData>

		// to verify whether received response is ACK or NACK
		if ( SPI_VerifyResponse(ackbyte) )
 80004d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffa8 	bl	800042c <SPI_VerifyResponse>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d016      	beq.n	8000510 <main+0xc4>
		{
			// send arguments
			args[0] = LED_PIN;
 80004e2:	2308      	movs	r3, #8
 80004e4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			args[1] = LED_ON;
 80004e8:	2301      	movs	r3, #1
 80004ea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			SPI_SendData(SPI2, args, 2);
 80004ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f2:	2202      	movs	r2, #2
 80004f4:	4619      	mov	r1, r3
 80004f6:	488c      	ldr	r0, [pc, #560]	@ (8000728 <main+0x2dc>)
 80004f8:	f000 fe0d 	bl	8001116 <SPI_SendData>

			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 80004fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000500:	2202      	movs	r2, #2
 8000502:	4619      	mov	r1, r3
 8000504:	4888      	ldr	r0, [pc, #544]	@ (8000728 <main+0x2dc>)
 8000506:	f000 fe3d 	bl	8001184 <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 800050a:	4889      	ldr	r0, [pc, #548]	@ (8000730 <main+0x2e4>)
 800050c:	f000 ffd2 	bl	80014b4 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

//		wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000510:	bf00      	nop
 8000512:	2100      	movs	r1, #0
 8000514:	4885      	ldr	r0, [pc, #532]	@ (800072c <main+0x2e0>)
 8000516:	f000 fd0f 	bl	8000f38 <GPIO_ReadFromInputPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f8      	beq.n	8000512 <main+0xc6>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000520:	f7ff feae 	bl	8000280 <delay>

		commandcode = COMMAND_SENSOR_READ;
 8000524:	2351      	movs	r3, #81	@ 0x51
 8000526:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800052a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	487d      	ldr	r0, [pc, #500]	@ (8000728 <main+0x2dc>)
 8000534:	f000 fdef 	bl	8001116 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000538:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	4879      	ldr	r0, [pc, #484]	@ (8000728 <main+0x2dc>)
 8000542:	f000 fe1f 	bl	8001184 <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000546:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800054a:	2201      	movs	r2, #1
 800054c:	4619      	mov	r1, r3
 800054e:	4876      	ldr	r0, [pc, #472]	@ (8000728 <main+0x2dc>)
 8000550:	f000 fde1 	bl	8001116 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	4872      	ldr	r0, [pc, #456]	@ (8000728 <main+0x2dc>)
 800055e:	f000 fe11 	bl	8001184 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000562:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff60 	bl	800042c <SPI_VerifyResponse>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d024      	beq.n	80005bc <main+0x170>
		{
			args[0] = ANALOG_PIN0;
 8000572:	2300      	movs	r3, #0
 8000574:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	4869      	ldr	r0, [pc, #420]	@ (8000728 <main+0x2dc>)
 8000582:	f000 fdc8 	bl	8001116 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000586:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800058a:	2201      	movs	r2, #1
 800058c:	4619      	mov	r1, r3
 800058e:	4866      	ldr	r0, [pc, #408]	@ (8000728 <main+0x2dc>)
 8000590:	f000 fdf8 	bl	8001184 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000594:	f7ff fe74 	bl	8000280 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000598:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	4861      	ldr	r0, [pc, #388]	@ (8000728 <main+0x2dc>)
 80005a2:	f000 fdb8 	bl	8001116 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 80005a6:	1cfb      	adds	r3, r7, #3
 80005a8:	2201      	movs	r2, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	485e      	ldr	r0, [pc, #376]	@ (8000728 <main+0x2dc>)
 80005ae:	f000 fde9 	bl	8001184 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	4619      	mov	r1, r3
 80005b6:	485f      	ldr	r0, [pc, #380]	@ (8000734 <main+0x2e8>)
 80005b8:	f000 ff14 	bl	80013e4 <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005bc:	bf00      	nop
 80005be:	2100      	movs	r1, #0
 80005c0:	485a      	ldr	r0, [pc, #360]	@ (800072c <main+0x2e0>)
 80005c2:	f000 fcb9 	bl	8000f38 <GPIO_ReadFromInputPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f8      	beq.n	80005be <main+0x172>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 80005cc:	f7ff fe58 	bl	8000280 <delay>

				commandcode = COMMAND_LED_READ;
 80005d0:	2352      	movs	r3, #82	@ 0x52
 80005d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 80005d6:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	4852      	ldr	r0, [pc, #328]	@ (8000728 <main+0x2dc>)
 80005e0:	f000 fd99 	bl	8001116 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80005e4:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	484e      	ldr	r0, [pc, #312]	@ (8000728 <main+0x2dc>)
 80005ee:	f000 fdc9 	bl	8001184 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 80005f2:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	484b      	ldr	r0, [pc, #300]	@ (8000728 <main+0x2dc>)
 80005fc:	f000 fd8b 	bl	8001116 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 8000600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	4847      	ldr	r0, [pc, #284]	@ (8000728 <main+0x2dc>)
 800060a:	f000 fdbb 	bl	8001184 <SPI_ReceiveData>

				if( SPI_VerifyResponse(ackbyte))
 800060e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff0a 	bl	800042c <SPI_VerifyResponse>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d024      	beq.n	8000668 <main+0x21c>
				{
					args[0] = LED_PIN;
 800061e:	2308      	movs	r3, #8
 8000620:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

					//send arguments
					SPI_SendData(SPI2,args,1); //sending one byte of
 8000624:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	483e      	ldr	r0, [pc, #248]	@ (8000728 <main+0x2dc>)
 800062e:	f000 fd72 	bl	8001116 <SPI_SendData>

					//do dummy read to clear off the RXNE
					SPI_ReceiveData(SPI2,&dummy_read,1);
 8000632:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	483b      	ldr	r0, [pc, #236]	@ (8000728 <main+0x2dc>)
 800063c:	f000 fda2 	bl	8001184 <SPI_ReceiveData>

					//insert some delay so that slave can ready with the data
					delay();
 8000640:	f7ff fe1e 	bl	8000280 <delay>

					//Send some dummy bits (1 byte) fetch the response from the slave
					SPI_SendData(SPI2,&dummy_write,1);
 8000644:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	4836      	ldr	r0, [pc, #216]	@ (8000728 <main+0x2dc>)
 800064e:	f000 fd62 	bl	8001116 <SPI_SendData>

					uint8_t led_status;
					SPI_ReceiveData(SPI2,&led_status,1);
 8000652:	1cbb      	adds	r3, r7, #2
 8000654:	2201      	movs	r2, #1
 8000656:	4619      	mov	r1, r3
 8000658:	4833      	ldr	r0, [pc, #204]	@ (8000728 <main+0x2dc>)
 800065a:	f000 fd93 	bl	8001184 <SPI_ReceiveData>
					printf("COMMAND_READ_LED %d\n",led_status);
 800065e:	78bb      	ldrb	r3, [r7, #2]
 8000660:	4619      	mov	r1, r3
 8000662:	4835      	ldr	r0, [pc, #212]	@ (8000738 <main+0x2ec>)
 8000664:	f000 febe 	bl	80013e4 <iprintf>
				}

				//4. CMD_PRINT 		<len(2)>  <message(len) >

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000668:	bf00      	nop
 800066a:	2100      	movs	r1, #0
 800066c:	482f      	ldr	r0, [pc, #188]	@ (800072c <main+0x2e0>)
 800066e:	f000 fc63 	bl	8000f38 <GPIO_ReadFromInputPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f8      	beq.n	800066a <main+0x21e>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 8000678:	f7ff fe02 	bl	8000280 <delay>

				commandcode = COMMAND_PRINT;
 800067c:	2353      	movs	r3, #83	@ 0x53
 800067e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 8000682:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <main+0x2dc>)
 800068c:	f000 fd43 	bl	8001116 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 8000690:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	4823      	ldr	r0, [pc, #140]	@ (8000728 <main+0x2dc>)
 800069a:	f000 fd73 	bl	8001184 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 800069e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80006a2:	2201      	movs	r2, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	4820      	ldr	r0, [pc, #128]	@ (8000728 <main+0x2dc>)
 80006a8:	f000 fd35 	bl	8001116 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 80006ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	481c      	ldr	r0, [pc, #112]	@ (8000728 <main+0x2dc>)
 80006b6:	f000 fd65 	bl	8001184 <SPI_ReceiveData>

				uint8_t message[] = "Hello ! How are you ??";
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <main+0x2f0>)
 80006bc:	f107 0410 	add.w	r4, r7, #16
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ca:	6020      	str	r0, [r4, #0]
 80006cc:	3404      	adds	r4, #4
 80006ce:	8021      	strh	r1, [r4, #0]
 80006d0:	3402      	adds	r4, #2
 80006d2:	0c0b      	lsrs	r3, r1, #16
 80006d4:	7023      	strb	r3, [r4, #0]
				if( SPI_VerifyResponse(ackbyte))
 80006d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fea6 	bl	800042c <SPI_VerifyResponse>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d048      	beq.n	8000778 <main+0x32c>
				{
					args[0] = strlen((char*)message);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd70 	bl	80001d0 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

					//send arguments
					SPI_SendData(SPI2,args,1); //sending length
 80006f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <main+0x2dc>)
 8000702:	f000 fd08 	bl	8001116 <SPI_SendData>

					//do dummy read to clear off the RXNE
					SPI_ReceiveData(SPI2,&dummy_read,1);
 8000706:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <main+0x2dc>)
 8000710:	f000 fd38 	bl	8001184 <SPI_ReceiveData>

					delay();
 8000714:	f7ff fdb4 	bl	8000280 <delay>

					//send message
					for(int i = 0 ; i < args[0] ; i++){
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
 800071c:	e023      	b.n	8000766 <main+0x31a>
 800071e:	bf00      	nop
 8000720:	08002188 	.word	0x08002188
 8000724:	080021a0 	.word	0x080021a0
 8000728:	40003800 	.word	0x40003800
 800072c:	40020000 	.word	0x40020000
 8000730:	080021b0 	.word	0x080021b0
 8000734:	080021cc 	.word	0x080021cc
 8000738:	080021e4 	.word	0x080021e4
 800073c:	08002228 	.word	0x08002228
						SPI_SendData(SPI2,&message[i],1);
 8000740:	f107 0210 	add.w	r2, r7, #16
 8000744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000746:	4413      	add	r3, r2
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	483a      	ldr	r0, [pc, #232]	@ (8000838 <main+0x3ec>)
 800074e:	f000 fce2 	bl	8001116 <SPI_SendData>
						SPI_ReceiveData(SPI2,&dummy_read,1);
 8000752:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4837      	ldr	r0, [pc, #220]	@ (8000838 <main+0x3ec>)
 800075c:	f000 fd12 	bl	8001184 <SPI_ReceiveData>
					for(int i = 0 ; i < args[0] ; i++){
 8000760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000762:	3301      	adds	r3, #1
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
 8000766:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800076a:	461a      	mov	r2, r3
 800076c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076e:	4293      	cmp	r3, r2
 8000770:	dbe6      	blt.n	8000740 <main+0x2f4>
					}

					printf("COMMAND_PRINT Executed \n");
 8000772:	4832      	ldr	r0, [pc, #200]	@ (800083c <main+0x3f0>)
 8000774:	f000 fe9e 	bl	80014b4 <puts>

				}

				//5. CMD_ID_READ
				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000778:	bf00      	nop
 800077a:	2100      	movs	r1, #0
 800077c:	4830      	ldr	r0, [pc, #192]	@ (8000840 <main+0x3f4>)
 800077e:	f000 fbdb 	bl	8000f38 <GPIO_ReadFromInputPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0f8      	beq.n	800077a <main+0x32e>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 8000788:	f7ff fd7a 	bl	8000280 <delay>

				commandcode = COMMAND_ID_READ;
 800078c:	2354      	movs	r3, #84	@ 0x54
 800078e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 8000792:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	4827      	ldr	r0, [pc, #156]	@ (8000838 <main+0x3ec>)
 800079c:	f000 fcbb 	bl	8001116 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80007a0:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4823      	ldr	r0, [pc, #140]	@ (8000838 <main+0x3ec>)
 80007aa:	f000 fceb 	bl	8001184 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 80007ae:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	4820      	ldr	r0, [pc, #128]	@ (8000838 <main+0x3ec>)
 80007b8:	f000 fcad 	bl	8001116 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 80007bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	481c      	ldr	r0, [pc, #112]	@ (8000838 <main+0x3ec>)
 80007c6:	f000 fcdd 	bl	8001184 <SPI_ReceiveData>

				uint8_t id[11];
				uint32_t i=0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
				if( SPI_VerifyResponse(ackbyte))
 80007ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe2a 	bl	800042c <SPI_VerifyResponse>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d01e      	beq.n	800081c <main+0x3d0>
				{
					//read 10 bytes id from the slave
					for(  i = 0 ; i < 10 ; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80007e2:	e011      	b.n	8000808 <main+0x3bc>
					{
						//send dummy byte to fetch data from slave
						SPI_SendData(SPI2,&dummy_write,1);
 80007e4:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	4812      	ldr	r0, [pc, #72]	@ (8000838 <main+0x3ec>)
 80007ee:	f000 fc92 	bl	8001116 <SPI_SendData>
						SPI_ReceiveData(SPI2,&id[i],1);
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007f6:	4413      	add	r3, r2
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <main+0x3ec>)
 80007fe:	f000 fcc1 	bl	8001184 <SPI_ReceiveData>
					for(  i = 0 ; i < 10 ; i++)
 8000802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000804:	3301      	adds	r3, #1
 8000806:	633b      	str	r3, [r7, #48]	@ 0x30
 8000808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800080a:	2b09      	cmp	r3, #9
 800080c:	d9ea      	bls.n	80007e4 <main+0x398>
					}

					id[10] = '\0';
 800080e:	2300      	movs	r3, #0
 8000810:	73bb      	strb	r3, [r7, #14]

					printf("COMMAND_ID : %s \n",id);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	@ (8000844 <main+0x3f8>)
 8000818:	f000 fde4 	bl	80013e4 <iprintf>

				}


		// before disabling SPI2 peripheral - confirm that SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 800081c:	bf00      	nop
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <main+0x3ec>)
 8000822:	f000 fc65 	bl	80010f0 <SPI_GetFlagStatus>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f8      	bne.n	800081e <main+0x3d2>

		// disabling SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 800082c:	2100      	movs	r1, #0
 800082e:	4802      	ldr	r0, [pc, #8]	@ (8000838 <main+0x3ec>)
 8000830:	f000 fcdf 	bl	80011f2 <SPI_PeripheralControl>
	{
 8000834:	e620      	b.n	8000478 <main+0x2c>
 8000836:	bf00      	nop
 8000838:	40003800 	.word	0x40003800
 800083c:	080021fc 	.word	0x080021fc
 8000840:	40020000 	.word	0x40020000
 8000844:	08002214 	.word	0x08002214

08000848 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <ITM_SendChar+0x44>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <ITM_SendChar+0x44>)
 8000858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800085c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <ITM_SendChar+0x48>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <ITM_SendChar+0x48>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800086a:	bf00      	nop
 800086c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f8      	beq.n	800086c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800087a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	6013      	str	r3, [r2, #0]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	e000edfc 	.word	0xe000edfc
 8000890:	e0000e00 	.word	0xe0000e00

08000894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
  }

  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e009      	b.n	80008f4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60ba      	str	r2, [r7, #8]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffad 	bl	8000848 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dbf1      	blt.n	80008e0 <_write+0x12>
  }
  return len;
 80008fc:	687b      	ldr	r3, [r7, #4]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_close>:

int _close(int file)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800092c:	605a      	str	r2, [r3, #4]
  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <_isatty>:

int _isatty(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
	...

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f000 feba 	bl	8001710 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20020000 	.word	0x20020000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	20000078 	.word	0x20000078
 80009d0:	200001c8 	.word	0x200001c8

080009d4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80009d4:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a02:	f000 fe8b 	bl	800171c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fd21 	bl	800044c <main>

08000a0a <LoopForever>:

LoopForever:
  b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   r0, =_estack
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a18:	08002284 	.word	0x08002284
  ldr r2, =_sbss
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a20:	200001c8 	.word	0x200001c8

08000a24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <GPIO_PeriClockControl>:
 *
 * @Note            -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d162      	bne.n	8000b00 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a64      	ldr	r2, [pc, #400]	@ (8000bd0 <GPIO_PeriClockControl+0x1a8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000a42:	4b64      	ldr	r3, [pc, #400]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a63      	ldr	r2, [pc, #396]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000a4e:	e0b9      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a61      	ldr	r2, [pc, #388]	@ (8000bd8 <GPIO_PeriClockControl+0x1b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a58:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a64:	e0ae      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a5c      	ldr	r2, [pc, #368]	@ (8000bdc <GPIO_PeriClockControl+0x1b4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a6e:	4b59      	ldr	r3, [pc, #356]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a58      	ldr	r2, [pc, #352]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a7a:	e0a3      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a58      	ldr	r2, [pc, #352]	@ (8000be0 <GPIO_PeriClockControl+0x1b8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d106      	bne.n	8000a92 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a84:	4b53      	ldr	r3, [pc, #332]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	4a52      	ldr	r2, [pc, #328]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a90:	e098      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a53      	ldr	r2, [pc, #332]	@ (8000be4 <GPIO_PeriClockControl+0x1bc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aa6:	e08d      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4f      	ldr	r2, [pc, #316]	@ (8000be8 <GPIO_PeriClockControl+0x1c0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ab0:	4b48      	ldr	r3, [pc, #288]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	4a47      	ldr	r2, [pc, #284]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ab6:	f043 0320 	orr.w	r3, r3, #32
 8000aba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000abc:	e082      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8000bec <GPIO_PeriClockControl+0x1c4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ac6:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a42      	ldr	r2, [pc, #264]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ad2:	e077      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a46      	ldr	r2, [pc, #280]	@ (8000bf0 <GPIO_PeriClockControl+0x1c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000adc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ae8:	e06c      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a41      	ldr	r2, [pc, #260]	@ (8000bf4 <GPIO_PeriClockControl+0x1cc>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d168      	bne.n	8000bc4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000af2:	4b38      	ldr	r3, [pc, #224]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a37      	ldr	r2, [pc, #220]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000afe:	e061      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a33      	ldr	r2, [pc, #204]	@ (8000bd0 <GPIO_PeriClockControl+0x1a8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000b08:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b14:	e056      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd8 <GPIO_PeriClockControl+0x1b0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b24:	f023 0302 	bic.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b2a:	e04b      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bdc <GPIO_PeriClockControl+0x1b4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000b34:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a26      	ldr	r2, [pc, #152]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b3a:	f023 0304 	bic.w	r3, r3, #4
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b40:	e040      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a26      	ldr	r2, [pc, #152]	@ (8000be0 <GPIO_PeriClockControl+0x1b8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000b4a:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b50:	f023 0308 	bic.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b56:	e035      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <GPIO_PeriClockControl+0x1bc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d106      	bne.n	8000b6e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b66:	f023 0310 	bic.w	r3, r3, #16
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b6c:	e02a      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <GPIO_PeriClockControl+0x1c0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d106      	bne.n	8000b84 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a16      	ldr	r2, [pc, #88]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b7c:	f023 0320 	bic.w	r3, r3, #32
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b82:	e01f      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <GPIO_PeriClockControl+0x1c4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b96:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b98:	e014      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <GPIO_PeriClockControl+0x1c8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bae:	e009      	b.n	8000bc4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <GPIO_PeriClockControl+0x1cc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d105      	bne.n	8000bc4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <GPIO_PeriClockControl+0x1ac>)
 8000bbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	40021c00 	.word	0x40021c00
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <GPIO_Init>:
 * @Note            -

 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;    // temp.register
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff0c 	bl	8000a28 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	795b      	ldrb	r3, [r3, #5]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d81f      	bhi.n	8000c58 <GPIO_Init+0x60>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // Each pin take 2 bites. So, multiply by 2
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	795b      	ldrb	r3, [r3, #5]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	4619      	mov	r1, r3
 8000c36:	2303      	movs	r3, #3
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	400a      	ands	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;      // setting
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e0ca      	b.n	8000dee <GPIO_Init+0x1f6>
		 */

	}else
	{
		// the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d117      	bne.n	8000c90 <GPIO_Init+0x98>
		{
			//1. Configure Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c60:	4b4a      	ldr	r3, [pc, #296]	@ (8000d8c <GPIO_Init+0x194>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	7912      	ldrb	r2, [r2, #4]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	408a      	lsls	r2, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a46      	ldr	r2, [pc, #280]	@ (8000d8c <GPIO_Init+0x194>)
 8000c72:	430b      	orrs	r3, r1
 8000c74:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c76:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <GPIO_Init+0x194>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	7912      	ldrb	r2, [r2, #4]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	2201      	movs	r2, #1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	4611      	mov	r1, r2
 8000c88:	4a40      	ldr	r2, [pc, #256]	@ (8000d8c <GPIO_Init+0x194>)
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	6093      	str	r3, [r2, #8]
 8000c8e:	e035      	b.n	8000cfc <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d117      	bne.n	8000cc8 <GPIO_Init+0xd0>
		{
			//1. Configure Raising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c98:	4b3c      	ldr	r3, [pc, #240]	@ (8000d8c <GPIO_Init+0x194>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	7912      	ldrb	r2, [r2, #4]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	408a      	lsls	r2, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a38      	ldr	r2, [pc, #224]	@ (8000d8c <GPIO_Init+0x194>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cae:	4b37      	ldr	r3, [pc, #220]	@ (8000d8c <GPIO_Init+0x194>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	7912      	ldrb	r2, [r2, #4]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	2201      	movs	r2, #1
 8000cba:	408a      	lsls	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4a32      	ldr	r2, [pc, #200]	@ (8000d8c <GPIO_Init+0x194>)
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	60d3      	str	r3, [r2, #12]
 8000cc6:	e019      	b.n	8000cfc <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	2b06      	cmp	r3, #6
 8000cce:	d115      	bne.n	8000cfc <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <GPIO_Init+0x194>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	7912      	ldrb	r2, [r2, #4]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	2201      	movs	r2, #1
 8000cdc:	408a      	lsls	r2, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d8c <GPIO_Init+0x194>)
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <GPIO_Init+0x194>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	7912      	ldrb	r2, [r2, #4]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	408a      	lsls	r2, r1
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <GPIO_Init+0x194>)
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6093      	str	r3, [r2, #8]

		}
		//2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <GPIO_Init+0x198>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d04d      	beq.n	8000db4 <GPIO_Init+0x1bc>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <GPIO_Init+0x19c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d032      	beq.n	8000d88 <GPIO_Init+0x190>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <GPIO_Init+0x1a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d02b      	beq.n	8000d84 <GPIO_Init+0x18c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <GPIO_Init+0x1a4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d024      	beq.n	8000d80 <GPIO_Init+0x188>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <GPIO_Init+0x1a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d01d      	beq.n	8000d7c <GPIO_Init+0x184>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <GPIO_Init+0x1ac>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d016      	beq.n	8000d78 <GPIO_Init+0x180>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a16      	ldr	r2, [pc, #88]	@ (8000da8 <GPIO_Init+0x1b0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00f      	beq.n	8000d74 <GPIO_Init+0x17c>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <GPIO_Init+0x1b4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d008      	beq.n	8000d70 <GPIO_Init+0x178>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <GPIO_Init+0x1b8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <GPIO_Init+0x174>
 8000d68:	2308      	movs	r3, #8
 8000d6a:	e024      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e022      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d70:	2307      	movs	r3, #7
 8000d72:	e020      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d74:	2306      	movs	r3, #6
 8000d76:	e01e      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d78:	2305      	movs	r3, #5
 8000d7a:	e01c      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e01a      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d80:	2303      	movs	r3, #3
 8000d82:	e018      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e016      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e014      	b.n	8000db6 <GPIO_Init+0x1be>
 8000d8c:	40013c00 	.word	0x40013c00
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40021400 	.word	0x40021400
 8000da8:	40021800 	.word	0x40021800
 8000dac:	40021c00 	.word	0x40021c00
 8000db0:	40022000 	.word	0x40022000
 8000db4:	2300      	movs	r3, #0
 8000db6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000db8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <GPIO_Init+0x334>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbc:	4a5b      	ldr	r2, [pc, #364]	@ (8000f2c <GPIO_Init+0x334>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000dc4:	7c7a      	ldrb	r2, [r7, #17]
 8000dc6:	7cbb      	ldrb	r3, [r7, #18]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f103 	lsl.w	r1, r2, r3
 8000dce:	4a58      	ldr	r2, [pc, #352]	@ (8000f30 <GPIO_Init+0x338>)
 8000dd0:	7cfb      	ldrb	r3, [r7, #19]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable EXTI interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dd8:	4b56      	ldr	r3, [pc, #344]	@ (8000f34 <GPIO_Init+0x33c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7912      	ldrb	r2, [r2, #4]
 8000de0:	4611      	mov	r1, r2
 8000de2:	2201      	movs	r2, #1
 8000de4:	408a      	lsls	r2, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	4a52      	ldr	r2, [pc, #328]	@ (8000f34 <GPIO_Init+0x33c>)
 8000dea:	430b      	orrs	r3, r1
 8000dec:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	799b      	ldrb	r3, [r3, #6]
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2303      	movs	r3, #3
 8000e12:	408b      	lsls	r3, r1
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;    // setting
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6899      	ldr	r1, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	609a      	str	r2, [r3, #8]
	temp=0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	79db      	ldrb	r3, [r3, #7]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	791b      	ldrb	r3, [r3, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	4619      	mov	r1, r3
 8000e52:	2303      	movs	r3, #3
 8000e54:	408b      	lsls	r3, r1
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	400a      	ands	r2, r1
 8000e60:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;    // setting
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68d9      	ldr	r1, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	60da      	str	r2, [r3, #12]
	temp=0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7a1b      	ldrb	r3, [r3, #8]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	791b      	ldrb	r3, [r3, #4]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clearing
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	4619      	mov	r1, r3
 8000e92:	2301      	movs	r3, #1
 8000e94:	408b      	lsls	r3, r1
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;     // setting
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6859      	ldr	r1, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]
	temp=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]


	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN )
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d131      	bne.n	8000f22 <GPIO_Init+0x32a>
	{
		// configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));  // clearing
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	7c3a      	ldrb	r2, [r7, #16]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	7c3a      	ldrb	r2, [r7, #16]
 8000ef0:	4001      	ands	r1, r0
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));      // setting
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	7c3a      	ldrb	r2, [r7, #16]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a5b      	ldrb	r3, [r3, #9]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	7c3a      	ldrb	r2, [r7, #16]
 8000f1a:	4301      	orrs	r1, r0
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40013c00 	.word	0x40013c00

08000f38 <GPIO_ReadFromInputPin>:
 * @Note            -

 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
	return value;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <SPI_PeriClockControl>:
 *
 * @Note            -  none

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d12b      	bne.n	8000fce <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a2d      	ldr	r2, [pc, #180]	@ (8001030 <SPI_PeriClockControl+0xcc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d106      	bne.n	8000f8c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a2c      	ldr	r2, [pc, #176]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if (pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000f8a:	e04b      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001038 <SPI_PeriClockControl+0xd4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d106      	bne.n	8000fa2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fa0:	e040      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI3)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a25      	ldr	r2, [pc, #148]	@ (800103c <SPI_PeriClockControl+0xd8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fb4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fb6:	e035      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI4)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <SPI_PeriClockControl+0xdc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d131      	bne.n	8001024 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fca:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000fcc:	e02a      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <SPI_PeriClockControl+0xcc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d106      	bne.n	8000fe4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a16      	ldr	r2, [pc, #88]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000fe2:	e01f      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <SPI_PeriClockControl+0xd4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d106      	bne.n	8000ffa <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8000ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ff8:	e014      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <SPI_PeriClockControl+0xd8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d106      	bne.n	8001010 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 8001008:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800100e:	e009      	b.n	8001024 <SPI_PeriClockControl+0xc0>
		}else if (pSPIx == SPI4)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <SPI_PeriClockControl+0xdc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d105      	bne.n	8001024 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101c:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <SPI_PeriClockControl+0xd0>)
 800101e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001022:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40013000 	.word	0x40013000
 8001034:	40023800 	.word	0x40023800
 8001038:	40003800 	.word	0x40003800
 800103c:	40003c00 	.word	0x40003c00
 8001040:	40013400 	.word	0x40013400

08001044 <SPI_Init>:
 * @Note            -  none

 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff86 	bl	8000f64 <SPI_PeriClockControl>

	//first Configure SPI_CR1 registers
	uint32_t tempreg = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]

	// 1. configure device mode
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

	// 2. configure Bus_Config
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	795b      	ldrb	r3, [r3, #5]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d104      	bne.n	800107a <SPI_Init+0x36>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e014      	b.n	80010a4 <SPI_Init+0x60>

	}else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d104      	bne.n	800108c <SPI_Init+0x48>
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e00b      	b.n	80010a4 <SPI_Init+0x60>

	}else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	795b      	ldrb	r3, [r3, #5]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d107      	bne.n	80010a4 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800109a:	60fb      	str	r3, [r7, #12]

		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010a2:	60fb      	str	r3, [r7, #12]
	}

	// 3. configure the SPI serial clock speed(Baud Rate)
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	799b      	ldrb	r3, [r3, #6]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

	// 4. Configure DFF
	tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	79db      	ldrb	r3, [r3, #7]
 80010b4:	02db      	lsls	r3, r3, #11
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7a1b      	ldrb	r3, [r3, #8]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7a5b      	ldrb	r3, [r3, #9]
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

	// 7. Enable SSM
	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7a9b      	ldrb	r3, [r3, #10]
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <SPI_SendData>:
 *
 * @Note            -  This is a Blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
	// Polling Based or Blocking Call
	while(Len > 0)
 8001122:	e027      	b.n	8001174 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8001124:	bf00      	nop
 8001126:	2102      	movs	r1, #2
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff ffe1 	bl	80010f0 <SPI_GetFlagStatus>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f8      	beq.n	8001126 <SPI_SendData+0x10>

		//2.check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00e      	beq.n	800115e <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. Load DR with 1 byte of data & increment the Buffer address
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	60da      	str	r2, [r3, #12]
			Len--;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3b01      	subs	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
			Len--;  // 2 bytes of Data
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	e00a      	b.n	8001174 <SPI_SendData+0x5e>

		}else{

			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	60da      	str	r2, [r3, #12]
			Len--;   // 1 byte of Data
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1d4      	bne.n	8001124 <SPI_SendData+0xe>
		}
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <SPI_ReceiveData>:
 *
 * @Note            -  none

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001190:	e027      	b.n	80011e2 <SPI_ReceiveData+0x5e>
			{
				//1. wait until RXNE is set
				while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8001192:	bf00      	nop
 8001194:	2101      	movs	r1, #1
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff ffaa 	bl	80010f0 <SPI_GetFlagStatus>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f8      	beq.n	8001194 <SPI_ReceiveData+0x10>

				//2. check the DFF bit in CR1
				if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <SPI_ReceiveData+0x48>
				{
					//16 bit DFF
					//1. load the data from DR to Rxbuffer address
					 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	801a      	strh	r2, [r3, #0]
					Len--;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
					Len--;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
					(uint16_t*)pRxBuffer++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	e00a      	b.n	80011e2 <SPI_ReceiveData+0x5e>
				}else
				{
					//8 bit DFF
					*(pRxBuffer) = pSPIx->DR ;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	701a      	strb	r2, [r3, #0]
					Len--;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3b01      	subs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
					pRxBuffer++;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1d4      	bne.n	8001192 <SPI_ReceiveData+0xe>
				}
			}
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <SPI_PeripheralControl>:
 * 					   When SPI peripheral is enabled, the SPI peripheral will be busy in data communication
 * 					   and SPI peripheral will not accept any changes made to the control registers.
 *                     So, it is better to do all control register configuration while SPI peripheral is disable!!!!
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d106      	bne.n	8001212 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8001210:	e005      	b.n	800121e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SPI_SSOEConfig>:
 *
 * @Note            -  Helps to control NSS pin toggle in accordance
 * 					   with SPE bit
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d106      	bne.n	8001248 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f043 0204 	orr.w	r2, r3, #4
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001246:	e005      	b.n	8001254 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 0204 	bic.w	r2, r3, #4
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <std>:
 8001260:	2300      	movs	r3, #0
 8001262:	b510      	push	{r4, lr}
 8001264:	4604      	mov	r4, r0
 8001266:	e9c0 3300 	strd	r3, r3, [r0]
 800126a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800126e:	6083      	str	r3, [r0, #8]
 8001270:	8181      	strh	r1, [r0, #12]
 8001272:	6643      	str	r3, [r0, #100]	@ 0x64
 8001274:	81c2      	strh	r2, [r0, #14]
 8001276:	6183      	str	r3, [r0, #24]
 8001278:	4619      	mov	r1, r3
 800127a:	2208      	movs	r2, #8
 800127c:	305c      	adds	r0, #92	@ 0x5c
 800127e:	f000 f9f9 	bl	8001674 <memset>
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <std+0x58>)
 8001284:	6263      	str	r3, [r4, #36]	@ 0x24
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <std+0x5c>)
 8001288:	62a3      	str	r3, [r4, #40]	@ 0x28
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <std+0x60>)
 800128c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <std+0x64>)
 8001290:	6323      	str	r3, [r4, #48]	@ 0x30
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <std+0x68>)
 8001294:	6224      	str	r4, [r4, #32]
 8001296:	429c      	cmp	r4, r3
 8001298:	d006      	beq.n	80012a8 <std+0x48>
 800129a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800129e:	4294      	cmp	r4, r2
 80012a0:	d002      	beq.n	80012a8 <std+0x48>
 80012a2:	33d0      	adds	r3, #208	@ 0xd0
 80012a4:	429c      	cmp	r4, r3
 80012a6:	d105      	bne.n	80012b4 <std+0x54>
 80012a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80012ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b0:	f000 ba58 	b.w	8001764 <__retarget_lock_init_recursive>
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	bf00      	nop
 80012b8:	080014c5 	.word	0x080014c5
 80012bc:	080014e7 	.word	0x080014e7
 80012c0:	0800151f 	.word	0x0800151f
 80012c4:	08001543 	.word	0x08001543
 80012c8:	2000007c 	.word	0x2000007c

080012cc <stdio_exit_handler>:
 80012cc:	4a02      	ldr	r2, [pc, #8]	@ (80012d8 <stdio_exit_handler+0xc>)
 80012ce:	4903      	ldr	r1, [pc, #12]	@ (80012dc <stdio_exit_handler+0x10>)
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <stdio_exit_handler+0x14>)
 80012d2:	f000 b869 	b.w	80013a8 <_fwalk_sglue>
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	08001ff9 	.word	0x08001ff9
 80012e0:	20000010 	.word	0x20000010

080012e4 <cleanup_stdio>:
 80012e4:	6841      	ldr	r1, [r0, #4]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <cleanup_stdio+0x34>)
 80012e8:	4299      	cmp	r1, r3
 80012ea:	b510      	push	{r4, lr}
 80012ec:	4604      	mov	r4, r0
 80012ee:	d001      	beq.n	80012f4 <cleanup_stdio+0x10>
 80012f0:	f000 fe82 	bl	8001ff8 <_fflush_r>
 80012f4:	68a1      	ldr	r1, [r4, #8]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <cleanup_stdio+0x38>)
 80012f8:	4299      	cmp	r1, r3
 80012fa:	d002      	beq.n	8001302 <cleanup_stdio+0x1e>
 80012fc:	4620      	mov	r0, r4
 80012fe:	f000 fe7b 	bl	8001ff8 <_fflush_r>
 8001302:	68e1      	ldr	r1, [r4, #12]
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <cleanup_stdio+0x3c>)
 8001306:	4299      	cmp	r1, r3
 8001308:	d004      	beq.n	8001314 <cleanup_stdio+0x30>
 800130a:	4620      	mov	r0, r4
 800130c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001310:	f000 be72 	b.w	8001ff8 <_fflush_r>
 8001314:	bd10      	pop	{r4, pc}
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c
 800131c:	200000e4 	.word	0x200000e4
 8001320:	2000014c 	.word	0x2000014c

08001324 <global_stdio_init.part.0>:
 8001324:	b510      	push	{r4, lr}
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <global_stdio_init.part.0+0x30>)
 8001328:	4c0b      	ldr	r4, [pc, #44]	@ (8001358 <global_stdio_init.part.0+0x34>)
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <global_stdio_init.part.0+0x38>)
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4620      	mov	r0, r4
 8001330:	2200      	movs	r2, #0
 8001332:	2104      	movs	r1, #4
 8001334:	f7ff ff94 	bl	8001260 <std>
 8001338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800133c:	2201      	movs	r2, #1
 800133e:	2109      	movs	r1, #9
 8001340:	f7ff ff8e 	bl	8001260 <std>
 8001344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001348:	2202      	movs	r2, #2
 800134a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800134e:	2112      	movs	r1, #18
 8001350:	f7ff bf86 	b.w	8001260 <std>
 8001354:	200001b4 	.word	0x200001b4
 8001358:	2000007c 	.word	0x2000007c
 800135c:	080012cd 	.word	0x080012cd

08001360 <__sfp_lock_acquire>:
 8001360:	4801      	ldr	r0, [pc, #4]	@ (8001368 <__sfp_lock_acquire+0x8>)
 8001362:	f000 ba00 	b.w	8001766 <__retarget_lock_acquire_recursive>
 8001366:	bf00      	nop
 8001368:	200001bd 	.word	0x200001bd

0800136c <__sfp_lock_release>:
 800136c:	4801      	ldr	r0, [pc, #4]	@ (8001374 <__sfp_lock_release+0x8>)
 800136e:	f000 b9fb 	b.w	8001768 <__retarget_lock_release_recursive>
 8001372:	bf00      	nop
 8001374:	200001bd 	.word	0x200001bd

08001378 <__sinit>:
 8001378:	b510      	push	{r4, lr}
 800137a:	4604      	mov	r4, r0
 800137c:	f7ff fff0 	bl	8001360 <__sfp_lock_acquire>
 8001380:	6a23      	ldr	r3, [r4, #32]
 8001382:	b11b      	cbz	r3, 800138c <__sinit+0x14>
 8001384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001388:	f7ff bff0 	b.w	800136c <__sfp_lock_release>
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__sinit+0x28>)
 800138e:	6223      	str	r3, [r4, #32]
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__sinit+0x2c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f5      	bne.n	8001384 <__sinit+0xc>
 8001398:	f7ff ffc4 	bl	8001324 <global_stdio_init.part.0>
 800139c:	e7f2      	b.n	8001384 <__sinit+0xc>
 800139e:	bf00      	nop
 80013a0:	080012e5 	.word	0x080012e5
 80013a4:	200001b4 	.word	0x200001b4

080013a8 <_fwalk_sglue>:
 80013a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013ac:	4607      	mov	r7, r0
 80013ae:	4688      	mov	r8, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	2600      	movs	r6, #0
 80013b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013b8:	f1b9 0901 	subs.w	r9, r9, #1
 80013bc:	d505      	bpl.n	80013ca <_fwalk_sglue+0x22>
 80013be:	6824      	ldr	r4, [r4, #0]
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d1f7      	bne.n	80013b4 <_fwalk_sglue+0xc>
 80013c4:	4630      	mov	r0, r6
 80013c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ca:	89ab      	ldrh	r3, [r5, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d907      	bls.n	80013e0 <_fwalk_sglue+0x38>
 80013d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013d4:	3301      	adds	r3, #1
 80013d6:	d003      	beq.n	80013e0 <_fwalk_sglue+0x38>
 80013d8:	4629      	mov	r1, r5
 80013da:	4638      	mov	r0, r7
 80013dc:	47c0      	blx	r8
 80013de:	4306      	orrs	r6, r0
 80013e0:	3568      	adds	r5, #104	@ 0x68
 80013e2:	e7e9      	b.n	80013b8 <_fwalk_sglue+0x10>

080013e4 <iprintf>:
 80013e4:	b40f      	push	{r0, r1, r2, r3}
 80013e6:	b507      	push	{r0, r1, r2, lr}
 80013e8:	4906      	ldr	r1, [pc, #24]	@ (8001404 <iprintf+0x20>)
 80013ea:	ab04      	add	r3, sp, #16
 80013ec:	6808      	ldr	r0, [r1, #0]
 80013ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80013f2:	6881      	ldr	r1, [r0, #8]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f000 fad9 	bl	80019ac <_vfiprintf_r>
 80013fa:	b003      	add	sp, #12
 80013fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001400:	b004      	add	sp, #16
 8001402:	4770      	bx	lr
 8001404:	2000000c 	.word	0x2000000c

08001408 <_puts_r>:
 8001408:	6a03      	ldr	r3, [r0, #32]
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	6884      	ldr	r4, [r0, #8]
 800140e:	4605      	mov	r5, r0
 8001410:	460e      	mov	r6, r1
 8001412:	b90b      	cbnz	r3, 8001418 <_puts_r+0x10>
 8001414:	f7ff ffb0 	bl	8001378 <__sinit>
 8001418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800141a:	07db      	lsls	r3, r3, #31
 800141c:	d405      	bmi.n	800142a <_puts_r+0x22>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	0598      	lsls	r0, r3, #22
 8001422:	d402      	bmi.n	800142a <_puts_r+0x22>
 8001424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001426:	f000 f99e 	bl	8001766 <__retarget_lock_acquire_recursive>
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	0719      	lsls	r1, r3, #28
 800142e:	d502      	bpl.n	8001436 <_puts_r+0x2e>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d135      	bne.n	80014a2 <_puts_r+0x9a>
 8001436:	4621      	mov	r1, r4
 8001438:	4628      	mov	r0, r5
 800143a:	f000 f8c5 	bl	80015c8 <__swsetup_r>
 800143e:	b380      	cbz	r0, 80014a2 <_puts_r+0x9a>
 8001440:	f04f 35ff 	mov.w	r5, #4294967295
 8001444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001446:	07da      	lsls	r2, r3, #31
 8001448:	d405      	bmi.n	8001456 <_puts_r+0x4e>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	059b      	lsls	r3, r3, #22
 800144e:	d402      	bmi.n	8001456 <_puts_r+0x4e>
 8001450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001452:	f000 f989 	bl	8001768 <__retarget_lock_release_recursive>
 8001456:	4628      	mov	r0, r5
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	2b00      	cmp	r3, #0
 800145c:	da04      	bge.n	8001468 <_puts_r+0x60>
 800145e:	69a2      	ldr	r2, [r4, #24]
 8001460:	429a      	cmp	r2, r3
 8001462:	dc17      	bgt.n	8001494 <_puts_r+0x8c>
 8001464:	290a      	cmp	r1, #10
 8001466:	d015      	beq.n	8001494 <_puts_r+0x8c>
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	6022      	str	r2, [r4, #0]
 800146e:	7019      	strb	r1, [r3, #0]
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001476:	3b01      	subs	r3, #1
 8001478:	60a3      	str	r3, [r4, #8]
 800147a:	2900      	cmp	r1, #0
 800147c:	d1ed      	bne.n	800145a <_puts_r+0x52>
 800147e:	2b00      	cmp	r3, #0
 8001480:	da11      	bge.n	80014a6 <_puts_r+0x9e>
 8001482:	4622      	mov	r2, r4
 8001484:	210a      	movs	r1, #10
 8001486:	4628      	mov	r0, r5
 8001488:	f000 f85f 	bl	800154a <__swbuf_r>
 800148c:	3001      	adds	r0, #1
 800148e:	d0d7      	beq.n	8001440 <_puts_r+0x38>
 8001490:	250a      	movs	r5, #10
 8001492:	e7d7      	b.n	8001444 <_puts_r+0x3c>
 8001494:	4622      	mov	r2, r4
 8001496:	4628      	mov	r0, r5
 8001498:	f000 f857 	bl	800154a <__swbuf_r>
 800149c:	3001      	adds	r0, #1
 800149e:	d1e7      	bne.n	8001470 <_puts_r+0x68>
 80014a0:	e7ce      	b.n	8001440 <_puts_r+0x38>
 80014a2:	3e01      	subs	r6, #1
 80014a4:	e7e4      	b.n	8001470 <_puts_r+0x68>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	6022      	str	r2, [r4, #0]
 80014ac:	220a      	movs	r2, #10
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e7ee      	b.n	8001490 <_puts_r+0x88>
	...

080014b4 <puts>:
 80014b4:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <puts+0xc>)
 80014b6:	4601      	mov	r1, r0
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	f7ff bfa5 	b.w	8001408 <_puts_r>
 80014be:	bf00      	nop
 80014c0:	2000000c 	.word	0x2000000c

080014c4 <__sread>:
 80014c4:	b510      	push	{r4, lr}
 80014c6:	460c      	mov	r4, r1
 80014c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014cc:	f000 f8fc 	bl	80016c8 <_read_r>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	bfab      	itete	ge
 80014d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80014d6:	89a3      	ldrhlt	r3, [r4, #12]
 80014d8:	181b      	addge	r3, r3, r0
 80014da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80014de:	bfac      	ite	ge
 80014e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80014e2:	81a3      	strhlt	r3, [r4, #12]
 80014e4:	bd10      	pop	{r4, pc}

080014e6 <__swrite>:
 80014e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ea:	461f      	mov	r7, r3
 80014ec:	898b      	ldrh	r3, [r1, #12]
 80014ee:	05db      	lsls	r3, r3, #23
 80014f0:	4605      	mov	r5, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4616      	mov	r6, r2
 80014f6:	d505      	bpl.n	8001504 <__swrite+0x1e>
 80014f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014fc:	2302      	movs	r3, #2
 80014fe:	2200      	movs	r2, #0
 8001500:	f000 f8d0 	bl	80016a4 <_lseek_r>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800150a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	4632      	mov	r2, r6
 8001512:	463b      	mov	r3, r7
 8001514:	4628      	mov	r0, r5
 8001516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800151a:	f000 b8e7 	b.w	80016ec <_write_r>

0800151e <__sseek>:
 800151e:	b510      	push	{r4, lr}
 8001520:	460c      	mov	r4, r1
 8001522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001526:	f000 f8bd 	bl	80016a4 <_lseek_r>
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	89a3      	ldrh	r3, [r4, #12]
 800152e:	bf15      	itete	ne
 8001530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800153a:	81a3      	strheq	r3, [r4, #12]
 800153c:	bf18      	it	ne
 800153e:	81a3      	strhne	r3, [r4, #12]
 8001540:	bd10      	pop	{r4, pc}

08001542 <__sclose>:
 8001542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001546:	f000 b89d 	b.w	8001684 <_close_r>

0800154a <__swbuf_r>:
 800154a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154c:	460e      	mov	r6, r1
 800154e:	4614      	mov	r4, r2
 8001550:	4605      	mov	r5, r0
 8001552:	b118      	cbz	r0, 800155c <__swbuf_r+0x12>
 8001554:	6a03      	ldr	r3, [r0, #32]
 8001556:	b90b      	cbnz	r3, 800155c <__swbuf_r+0x12>
 8001558:	f7ff ff0e 	bl	8001378 <__sinit>
 800155c:	69a3      	ldr	r3, [r4, #24]
 800155e:	60a3      	str	r3, [r4, #8]
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	071a      	lsls	r2, r3, #28
 8001564:	d501      	bpl.n	800156a <__swbuf_r+0x20>
 8001566:	6923      	ldr	r3, [r4, #16]
 8001568:	b943      	cbnz	r3, 800157c <__swbuf_r+0x32>
 800156a:	4621      	mov	r1, r4
 800156c:	4628      	mov	r0, r5
 800156e:	f000 f82b 	bl	80015c8 <__swsetup_r>
 8001572:	b118      	cbz	r0, 800157c <__swbuf_r+0x32>
 8001574:	f04f 37ff 	mov.w	r7, #4294967295
 8001578:	4638      	mov	r0, r7
 800157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	6922      	ldr	r2, [r4, #16]
 8001580:	1a98      	subs	r0, r3, r2
 8001582:	6963      	ldr	r3, [r4, #20]
 8001584:	b2f6      	uxtb	r6, r6
 8001586:	4283      	cmp	r3, r0
 8001588:	4637      	mov	r7, r6
 800158a:	dc05      	bgt.n	8001598 <__swbuf_r+0x4e>
 800158c:	4621      	mov	r1, r4
 800158e:	4628      	mov	r0, r5
 8001590:	f000 fd32 	bl	8001ff8 <_fflush_r>
 8001594:	2800      	cmp	r0, #0
 8001596:	d1ed      	bne.n	8001574 <__swbuf_r+0x2a>
 8001598:	68a3      	ldr	r3, [r4, #8]
 800159a:	3b01      	subs	r3, #1
 800159c:	60a3      	str	r3, [r4, #8]
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	6022      	str	r2, [r4, #0]
 80015a4:	701e      	strb	r6, [r3, #0]
 80015a6:	6962      	ldr	r2, [r4, #20]
 80015a8:	1c43      	adds	r3, r0, #1
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d004      	beq.n	80015b8 <__swbuf_r+0x6e>
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	07db      	lsls	r3, r3, #31
 80015b2:	d5e1      	bpl.n	8001578 <__swbuf_r+0x2e>
 80015b4:	2e0a      	cmp	r6, #10
 80015b6:	d1df      	bne.n	8001578 <__swbuf_r+0x2e>
 80015b8:	4621      	mov	r1, r4
 80015ba:	4628      	mov	r0, r5
 80015bc:	f000 fd1c 	bl	8001ff8 <_fflush_r>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d0d9      	beq.n	8001578 <__swbuf_r+0x2e>
 80015c4:	e7d6      	b.n	8001574 <__swbuf_r+0x2a>
	...

080015c8 <__swsetup_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <__swsetup_r+0xa8>)
 80015cc:	4605      	mov	r5, r0
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	460c      	mov	r4, r1
 80015d2:	b118      	cbz	r0, 80015dc <__swsetup_r+0x14>
 80015d4:	6a03      	ldr	r3, [r0, #32]
 80015d6:	b90b      	cbnz	r3, 80015dc <__swsetup_r+0x14>
 80015d8:	f7ff fece 	bl	8001378 <__sinit>
 80015dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e0:	0719      	lsls	r1, r3, #28
 80015e2:	d422      	bmi.n	800162a <__swsetup_r+0x62>
 80015e4:	06da      	lsls	r2, r3, #27
 80015e6:	d407      	bmi.n	80015f8 <__swsetup_r+0x30>
 80015e8:	2209      	movs	r2, #9
 80015ea:	602a      	str	r2, [r5, #0]
 80015ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f0:	81a3      	strh	r3, [r4, #12]
 80015f2:	f04f 30ff 	mov.w	r0, #4294967295
 80015f6:	e033      	b.n	8001660 <__swsetup_r+0x98>
 80015f8:	0758      	lsls	r0, r3, #29
 80015fa:	d512      	bpl.n	8001622 <__swsetup_r+0x5a>
 80015fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015fe:	b141      	cbz	r1, 8001612 <__swsetup_r+0x4a>
 8001600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001604:	4299      	cmp	r1, r3
 8001606:	d002      	beq.n	800160e <__swsetup_r+0x46>
 8001608:	4628      	mov	r0, r5
 800160a:	f000 f8af 	bl	800176c <_free_r>
 800160e:	2300      	movs	r3, #0
 8001610:	6363      	str	r3, [r4, #52]	@ 0x34
 8001612:	89a3      	ldrh	r3, [r4, #12]
 8001614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001618:	81a3      	strh	r3, [r4, #12]
 800161a:	2300      	movs	r3, #0
 800161c:	6063      	str	r3, [r4, #4]
 800161e:	6923      	ldr	r3, [r4, #16]
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	6923      	ldr	r3, [r4, #16]
 800162c:	b94b      	cbnz	r3, 8001642 <__swsetup_r+0x7a>
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001638:	d003      	beq.n	8001642 <__swsetup_r+0x7a>
 800163a:	4621      	mov	r1, r4
 800163c:	4628      	mov	r0, r5
 800163e:	f000 fd29 	bl	8002094 <__smakebuf_r>
 8001642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001646:	f013 0201 	ands.w	r2, r3, #1
 800164a:	d00a      	beq.n	8001662 <__swsetup_r+0x9a>
 800164c:	2200      	movs	r2, #0
 800164e:	60a2      	str	r2, [r4, #8]
 8001650:	6962      	ldr	r2, [r4, #20]
 8001652:	4252      	negs	r2, r2
 8001654:	61a2      	str	r2, [r4, #24]
 8001656:	6922      	ldr	r2, [r4, #16]
 8001658:	b942      	cbnz	r2, 800166c <__swsetup_r+0xa4>
 800165a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800165e:	d1c5      	bne.n	80015ec <__swsetup_r+0x24>
 8001660:	bd38      	pop	{r3, r4, r5, pc}
 8001662:	0799      	lsls	r1, r3, #30
 8001664:	bf58      	it	pl
 8001666:	6962      	ldrpl	r2, [r4, #20]
 8001668:	60a2      	str	r2, [r4, #8]
 800166a:	e7f4      	b.n	8001656 <__swsetup_r+0x8e>
 800166c:	2000      	movs	r0, #0
 800166e:	e7f7      	b.n	8001660 <__swsetup_r+0x98>
 8001670:	2000000c 	.word	0x2000000c

08001674 <memset>:
 8001674:	4402      	add	r2, r0
 8001676:	4603      	mov	r3, r0
 8001678:	4293      	cmp	r3, r2
 800167a:	d100      	bne.n	800167e <memset+0xa>
 800167c:	4770      	bx	lr
 800167e:	f803 1b01 	strb.w	r1, [r3], #1
 8001682:	e7f9      	b.n	8001678 <memset+0x4>

08001684 <_close_r>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	4d06      	ldr	r5, [pc, #24]	@ (80016a0 <_close_r+0x1c>)
 8001688:	2300      	movs	r3, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	602b      	str	r3, [r5, #0]
 8001690:	f7ff f939 	bl	8000906 <_close>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d102      	bne.n	800169e <_close_r+0x1a>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b103      	cbz	r3, 800169e <_close_r+0x1a>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	200001b8 	.word	0x200001b8

080016a4 <_lseek_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d07      	ldr	r5, [pc, #28]	@ (80016c4 <_lseek_r+0x20>)
 80016a8:	4604      	mov	r4, r0
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	2200      	movs	r2, #0
 80016b0:	602a      	str	r2, [r5, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f7ff f94b 	bl	800094e <_lseek>
 80016b8:	1c43      	adds	r3, r0, #1
 80016ba:	d102      	bne.n	80016c2 <_lseek_r+0x1e>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	b103      	cbz	r3, 80016c2 <_lseek_r+0x1e>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	200001b8 	.word	0x200001b8

080016c8 <_read_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d07      	ldr	r5, [pc, #28]	@ (80016e8 <_read_r+0x20>)
 80016cc:	4604      	mov	r4, r0
 80016ce:	4608      	mov	r0, r1
 80016d0:	4611      	mov	r1, r2
 80016d2:	2200      	movs	r2, #0
 80016d4:	602a      	str	r2, [r5, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	f7ff f8dc 	bl	8000894 <_read>
 80016dc:	1c43      	adds	r3, r0, #1
 80016de:	d102      	bne.n	80016e6 <_read_r+0x1e>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	b103      	cbz	r3, 80016e6 <_read_r+0x1e>
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	200001b8 	.word	0x200001b8

080016ec <_write_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4d07      	ldr	r5, [pc, #28]	@ (800170c <_write_r+0x20>)
 80016f0:	4604      	mov	r4, r0
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	2200      	movs	r2, #0
 80016f8:	602a      	str	r2, [r5, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f7ff f8e7 	bl	80008ce <_write>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d102      	bne.n	800170a <_write_r+0x1e>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b103      	cbz	r3, 800170a <_write_r+0x1e>
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	200001b8 	.word	0x200001b8

08001710 <__errno>:
 8001710:	4b01      	ldr	r3, [pc, #4]	@ (8001718 <__errno+0x8>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000000c 	.word	0x2000000c

0800171c <__libc_init_array>:
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	4d0d      	ldr	r5, [pc, #52]	@ (8001754 <__libc_init_array+0x38>)
 8001720:	4c0d      	ldr	r4, [pc, #52]	@ (8001758 <__libc_init_array+0x3c>)
 8001722:	1b64      	subs	r4, r4, r5
 8001724:	10a4      	asrs	r4, r4, #2
 8001726:	2600      	movs	r6, #0
 8001728:	42a6      	cmp	r6, r4
 800172a:	d109      	bne.n	8001740 <__libc_init_array+0x24>
 800172c:	4d0b      	ldr	r5, [pc, #44]	@ (800175c <__libc_init_array+0x40>)
 800172e:	4c0c      	ldr	r4, [pc, #48]	@ (8001760 <__libc_init_array+0x44>)
 8001730:	f000 fd1e 	bl	8002170 <_init>
 8001734:	1b64      	subs	r4, r4, r5
 8001736:	10a4      	asrs	r4, r4, #2
 8001738:	2600      	movs	r6, #0
 800173a:	42a6      	cmp	r6, r4
 800173c:	d105      	bne.n	800174a <__libc_init_array+0x2e>
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	f855 3b04 	ldr.w	r3, [r5], #4
 8001744:	4798      	blx	r3
 8001746:	3601      	adds	r6, #1
 8001748:	e7ee      	b.n	8001728 <__libc_init_array+0xc>
 800174a:	f855 3b04 	ldr.w	r3, [r5], #4
 800174e:	4798      	blx	r3
 8001750:	3601      	adds	r6, #1
 8001752:	e7f2      	b.n	800173a <__libc_init_array+0x1e>
 8001754:	0800227c 	.word	0x0800227c
 8001758:	0800227c 	.word	0x0800227c
 800175c:	0800227c 	.word	0x0800227c
 8001760:	08002280 	.word	0x08002280

08001764 <__retarget_lock_init_recursive>:
 8001764:	4770      	bx	lr

08001766 <__retarget_lock_acquire_recursive>:
 8001766:	4770      	bx	lr

08001768 <__retarget_lock_release_recursive>:
 8001768:	4770      	bx	lr
	...

0800176c <_free_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4605      	mov	r5, r0
 8001770:	2900      	cmp	r1, #0
 8001772:	d041      	beq.n	80017f8 <_free_r+0x8c>
 8001774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001778:	1f0c      	subs	r4, r1, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfb8      	it	lt
 800177e:	18e4      	addlt	r4, r4, r3
 8001780:	f000 f8e0 	bl	8001944 <__malloc_lock>
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <_free_r+0x90>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	b933      	cbnz	r3, 8001798 <_free_r+0x2c>
 800178a:	6063      	str	r3, [r4, #4]
 800178c:	6014      	str	r4, [r2, #0]
 800178e:	4628      	mov	r0, r5
 8001790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001794:	f000 b8dc 	b.w	8001950 <__malloc_unlock>
 8001798:	42a3      	cmp	r3, r4
 800179a:	d908      	bls.n	80017ae <_free_r+0x42>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	1821      	adds	r1, r4, r0
 80017a0:	428b      	cmp	r3, r1
 80017a2:	bf01      	itttt	eq
 80017a4:	6819      	ldreq	r1, [r3, #0]
 80017a6:	685b      	ldreq	r3, [r3, #4]
 80017a8:	1809      	addeq	r1, r1, r0
 80017aa:	6021      	streq	r1, [r4, #0]
 80017ac:	e7ed      	b.n	800178a <_free_r+0x1e>
 80017ae:	461a      	mov	r2, r3
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	b10b      	cbz	r3, 80017b8 <_free_r+0x4c>
 80017b4:	42a3      	cmp	r3, r4
 80017b6:	d9fa      	bls.n	80017ae <_free_r+0x42>
 80017b8:	6811      	ldr	r1, [r2, #0]
 80017ba:	1850      	adds	r0, r2, r1
 80017bc:	42a0      	cmp	r0, r4
 80017be:	d10b      	bne.n	80017d8 <_free_r+0x6c>
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	4401      	add	r1, r0
 80017c4:	1850      	adds	r0, r2, r1
 80017c6:	4283      	cmp	r3, r0
 80017c8:	6011      	str	r1, [r2, #0]
 80017ca:	d1e0      	bne.n	800178e <_free_r+0x22>
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	6053      	str	r3, [r2, #4]
 80017d2:	4408      	add	r0, r1
 80017d4:	6010      	str	r0, [r2, #0]
 80017d6:	e7da      	b.n	800178e <_free_r+0x22>
 80017d8:	d902      	bls.n	80017e0 <_free_r+0x74>
 80017da:	230c      	movs	r3, #12
 80017dc:	602b      	str	r3, [r5, #0]
 80017de:	e7d6      	b.n	800178e <_free_r+0x22>
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	1821      	adds	r1, r4, r0
 80017e4:	428b      	cmp	r3, r1
 80017e6:	bf04      	itt	eq
 80017e8:	6819      	ldreq	r1, [r3, #0]
 80017ea:	685b      	ldreq	r3, [r3, #4]
 80017ec:	6063      	str	r3, [r4, #4]
 80017ee:	bf04      	itt	eq
 80017f0:	1809      	addeq	r1, r1, r0
 80017f2:	6021      	streq	r1, [r4, #0]
 80017f4:	6054      	str	r4, [r2, #4]
 80017f6:	e7ca      	b.n	800178e <_free_r+0x22>
 80017f8:	bd38      	pop	{r3, r4, r5, pc}
 80017fa:	bf00      	nop
 80017fc:	200001c4 	.word	0x200001c4

08001800 <sbrk_aligned>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	4e0f      	ldr	r6, [pc, #60]	@ (8001840 <sbrk_aligned+0x40>)
 8001804:	460c      	mov	r4, r1
 8001806:	6831      	ldr	r1, [r6, #0]
 8001808:	4605      	mov	r5, r0
 800180a:	b911      	cbnz	r1, 8001812 <sbrk_aligned+0x12>
 800180c:	f000 fca0 	bl	8002150 <_sbrk_r>
 8001810:	6030      	str	r0, [r6, #0]
 8001812:	4621      	mov	r1, r4
 8001814:	4628      	mov	r0, r5
 8001816:	f000 fc9b 	bl	8002150 <_sbrk_r>
 800181a:	1c43      	adds	r3, r0, #1
 800181c:	d103      	bne.n	8001826 <sbrk_aligned+0x26>
 800181e:	f04f 34ff 	mov.w	r4, #4294967295
 8001822:	4620      	mov	r0, r4
 8001824:	bd70      	pop	{r4, r5, r6, pc}
 8001826:	1cc4      	adds	r4, r0, #3
 8001828:	f024 0403 	bic.w	r4, r4, #3
 800182c:	42a0      	cmp	r0, r4
 800182e:	d0f8      	beq.n	8001822 <sbrk_aligned+0x22>
 8001830:	1a21      	subs	r1, r4, r0
 8001832:	4628      	mov	r0, r5
 8001834:	f000 fc8c 	bl	8002150 <_sbrk_r>
 8001838:	3001      	adds	r0, #1
 800183a:	d1f2      	bne.n	8001822 <sbrk_aligned+0x22>
 800183c:	e7ef      	b.n	800181e <sbrk_aligned+0x1e>
 800183e:	bf00      	nop
 8001840:	200001c0 	.word	0x200001c0

08001844 <_malloc_r>:
 8001844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001848:	1ccd      	adds	r5, r1, #3
 800184a:	f025 0503 	bic.w	r5, r5, #3
 800184e:	3508      	adds	r5, #8
 8001850:	2d0c      	cmp	r5, #12
 8001852:	bf38      	it	cc
 8001854:	250c      	movcc	r5, #12
 8001856:	2d00      	cmp	r5, #0
 8001858:	4606      	mov	r6, r0
 800185a:	db01      	blt.n	8001860 <_malloc_r+0x1c>
 800185c:	42a9      	cmp	r1, r5
 800185e:	d904      	bls.n	800186a <_malloc_r+0x26>
 8001860:	230c      	movs	r3, #12
 8001862:	6033      	str	r3, [r6, #0]
 8001864:	2000      	movs	r0, #0
 8001866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800186a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001940 <_malloc_r+0xfc>
 800186e:	f000 f869 	bl	8001944 <__malloc_lock>
 8001872:	f8d8 3000 	ldr.w	r3, [r8]
 8001876:	461c      	mov	r4, r3
 8001878:	bb44      	cbnz	r4, 80018cc <_malloc_r+0x88>
 800187a:	4629      	mov	r1, r5
 800187c:	4630      	mov	r0, r6
 800187e:	f7ff ffbf 	bl	8001800 <sbrk_aligned>
 8001882:	1c43      	adds	r3, r0, #1
 8001884:	4604      	mov	r4, r0
 8001886:	d158      	bne.n	800193a <_malloc_r+0xf6>
 8001888:	f8d8 4000 	ldr.w	r4, [r8]
 800188c:	4627      	mov	r7, r4
 800188e:	2f00      	cmp	r7, #0
 8001890:	d143      	bne.n	800191a <_malloc_r+0xd6>
 8001892:	2c00      	cmp	r4, #0
 8001894:	d04b      	beq.n	800192e <_malloc_r+0xea>
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	4639      	mov	r1, r7
 800189a:	4630      	mov	r0, r6
 800189c:	eb04 0903 	add.w	r9, r4, r3
 80018a0:	f000 fc56 	bl	8002150 <_sbrk_r>
 80018a4:	4581      	cmp	r9, r0
 80018a6:	d142      	bne.n	800192e <_malloc_r+0xea>
 80018a8:	6821      	ldr	r1, [r4, #0]
 80018aa:	1a6d      	subs	r5, r5, r1
 80018ac:	4629      	mov	r1, r5
 80018ae:	4630      	mov	r0, r6
 80018b0:	f7ff ffa6 	bl	8001800 <sbrk_aligned>
 80018b4:	3001      	adds	r0, #1
 80018b6:	d03a      	beq.n	800192e <_malloc_r+0xea>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	442b      	add	r3, r5
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	f8d8 3000 	ldr.w	r3, [r8]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	bb62      	cbnz	r2, 8001920 <_malloc_r+0xdc>
 80018c6:	f8c8 7000 	str.w	r7, [r8]
 80018ca:	e00f      	b.n	80018ec <_malloc_r+0xa8>
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	1b52      	subs	r2, r2, r5
 80018d0:	d420      	bmi.n	8001914 <_malloc_r+0xd0>
 80018d2:	2a0b      	cmp	r2, #11
 80018d4:	d917      	bls.n	8001906 <_malloc_r+0xc2>
 80018d6:	1961      	adds	r1, r4, r5
 80018d8:	42a3      	cmp	r3, r4
 80018da:	6025      	str	r5, [r4, #0]
 80018dc:	bf18      	it	ne
 80018de:	6059      	strne	r1, [r3, #4]
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	bf08      	it	eq
 80018e4:	f8c8 1000 	streq.w	r1, [r8]
 80018e8:	5162      	str	r2, [r4, r5]
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	4630      	mov	r0, r6
 80018ee:	f000 f82f 	bl	8001950 <__malloc_unlock>
 80018f2:	f104 000b 	add.w	r0, r4, #11
 80018f6:	1d23      	adds	r3, r4, #4
 80018f8:	f020 0007 	bic.w	r0, r0, #7
 80018fc:	1ac2      	subs	r2, r0, r3
 80018fe:	bf1c      	itt	ne
 8001900:	1a1b      	subne	r3, r3, r0
 8001902:	50a3      	strne	r3, [r4, r2]
 8001904:	e7af      	b.n	8001866 <_malloc_r+0x22>
 8001906:	6862      	ldr	r2, [r4, #4]
 8001908:	42a3      	cmp	r3, r4
 800190a:	bf0c      	ite	eq
 800190c:	f8c8 2000 	streq.w	r2, [r8]
 8001910:	605a      	strne	r2, [r3, #4]
 8001912:	e7eb      	b.n	80018ec <_malloc_r+0xa8>
 8001914:	4623      	mov	r3, r4
 8001916:	6864      	ldr	r4, [r4, #4]
 8001918:	e7ae      	b.n	8001878 <_malloc_r+0x34>
 800191a:	463c      	mov	r4, r7
 800191c:	687f      	ldr	r7, [r7, #4]
 800191e:	e7b6      	b.n	800188e <_malloc_r+0x4a>
 8001920:	461a      	mov	r2, r3
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	42a3      	cmp	r3, r4
 8001926:	d1fb      	bne.n	8001920 <_malloc_r+0xdc>
 8001928:	2300      	movs	r3, #0
 800192a:	6053      	str	r3, [r2, #4]
 800192c:	e7de      	b.n	80018ec <_malloc_r+0xa8>
 800192e:	230c      	movs	r3, #12
 8001930:	6033      	str	r3, [r6, #0]
 8001932:	4630      	mov	r0, r6
 8001934:	f000 f80c 	bl	8001950 <__malloc_unlock>
 8001938:	e794      	b.n	8001864 <_malloc_r+0x20>
 800193a:	6005      	str	r5, [r0, #0]
 800193c:	e7d6      	b.n	80018ec <_malloc_r+0xa8>
 800193e:	bf00      	nop
 8001940:	200001c4 	.word	0x200001c4

08001944 <__malloc_lock>:
 8001944:	4801      	ldr	r0, [pc, #4]	@ (800194c <__malloc_lock+0x8>)
 8001946:	f7ff bf0e 	b.w	8001766 <__retarget_lock_acquire_recursive>
 800194a:	bf00      	nop
 800194c:	200001bc 	.word	0x200001bc

08001950 <__malloc_unlock>:
 8001950:	4801      	ldr	r0, [pc, #4]	@ (8001958 <__malloc_unlock+0x8>)
 8001952:	f7ff bf09 	b.w	8001768 <__retarget_lock_release_recursive>
 8001956:	bf00      	nop
 8001958:	200001bc 	.word	0x200001bc

0800195c <__sfputc_r>:
 800195c:	6893      	ldr	r3, [r2, #8]
 800195e:	3b01      	subs	r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	b410      	push	{r4}
 8001964:	6093      	str	r3, [r2, #8]
 8001966:	da07      	bge.n	8001978 <__sfputc_r+0x1c>
 8001968:	6994      	ldr	r4, [r2, #24]
 800196a:	42a3      	cmp	r3, r4
 800196c:	db01      	blt.n	8001972 <__sfputc_r+0x16>
 800196e:	290a      	cmp	r1, #10
 8001970:	d102      	bne.n	8001978 <__sfputc_r+0x1c>
 8001972:	bc10      	pop	{r4}
 8001974:	f7ff bde9 	b.w	800154a <__swbuf_r>
 8001978:	6813      	ldr	r3, [r2, #0]
 800197a:	1c58      	adds	r0, r3, #1
 800197c:	6010      	str	r0, [r2, #0]
 800197e:	7019      	strb	r1, [r3, #0]
 8001980:	4608      	mov	r0, r1
 8001982:	bc10      	pop	{r4}
 8001984:	4770      	bx	lr

08001986 <__sfputs_r>:
 8001986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001988:	4606      	mov	r6, r0
 800198a:	460f      	mov	r7, r1
 800198c:	4614      	mov	r4, r2
 800198e:	18d5      	adds	r5, r2, r3
 8001990:	42ac      	cmp	r4, r5
 8001992:	d101      	bne.n	8001998 <__sfputs_r+0x12>
 8001994:	2000      	movs	r0, #0
 8001996:	e007      	b.n	80019a8 <__sfputs_r+0x22>
 8001998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800199c:	463a      	mov	r2, r7
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff ffdc 	bl	800195c <__sfputc_r>
 80019a4:	1c43      	adds	r3, r0, #1
 80019a6:	d1f3      	bne.n	8001990 <__sfputs_r+0xa>
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019ac <_vfiprintf_r>:
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	460d      	mov	r5, r1
 80019b2:	b09d      	sub	sp, #116	@ 0x74
 80019b4:	4614      	mov	r4, r2
 80019b6:	4698      	mov	r8, r3
 80019b8:	4606      	mov	r6, r0
 80019ba:	b118      	cbz	r0, 80019c4 <_vfiprintf_r+0x18>
 80019bc:	6a03      	ldr	r3, [r0, #32]
 80019be:	b90b      	cbnz	r3, 80019c4 <_vfiprintf_r+0x18>
 80019c0:	f7ff fcda 	bl	8001378 <__sinit>
 80019c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019c6:	07d9      	lsls	r1, r3, #31
 80019c8:	d405      	bmi.n	80019d6 <_vfiprintf_r+0x2a>
 80019ca:	89ab      	ldrh	r3, [r5, #12]
 80019cc:	059a      	lsls	r2, r3, #22
 80019ce:	d402      	bmi.n	80019d6 <_vfiprintf_r+0x2a>
 80019d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019d2:	f7ff fec8 	bl	8001766 <__retarget_lock_acquire_recursive>
 80019d6:	89ab      	ldrh	r3, [r5, #12]
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	d501      	bpl.n	80019e0 <_vfiprintf_r+0x34>
 80019dc:	692b      	ldr	r3, [r5, #16]
 80019de:	b99b      	cbnz	r3, 8001a08 <_vfiprintf_r+0x5c>
 80019e0:	4629      	mov	r1, r5
 80019e2:	4630      	mov	r0, r6
 80019e4:	f7ff fdf0 	bl	80015c8 <__swsetup_r>
 80019e8:	b170      	cbz	r0, 8001a08 <_vfiprintf_r+0x5c>
 80019ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019ec:	07dc      	lsls	r4, r3, #31
 80019ee:	d504      	bpl.n	80019fa <_vfiprintf_r+0x4e>
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	b01d      	add	sp, #116	@ 0x74
 80019f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fa:	89ab      	ldrh	r3, [r5, #12]
 80019fc:	0598      	lsls	r0, r3, #22
 80019fe:	d4f7      	bmi.n	80019f0 <_vfiprintf_r+0x44>
 8001a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a02:	f7ff feb1 	bl	8001768 <__retarget_lock_release_recursive>
 8001a06:	e7f3      	b.n	80019f0 <_vfiprintf_r+0x44>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a16:	2330      	movs	r3, #48	@ 0x30
 8001a18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001bc8 <_vfiprintf_r+0x21c>
 8001a1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a20:	f04f 0901 	mov.w	r9, #1
 8001a24:	4623      	mov	r3, r4
 8001a26:	469a      	mov	sl, r3
 8001a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a2c:	b10a      	cbz	r2, 8001a32 <_vfiprintf_r+0x86>
 8001a2e:	2a25      	cmp	r2, #37	@ 0x25
 8001a30:	d1f9      	bne.n	8001a26 <_vfiprintf_r+0x7a>
 8001a32:	ebba 0b04 	subs.w	fp, sl, r4
 8001a36:	d00b      	beq.n	8001a50 <_vfiprintf_r+0xa4>
 8001a38:	465b      	mov	r3, fp
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f7ff ffa1 	bl	8001986 <__sfputs_r>
 8001a44:	3001      	adds	r0, #1
 8001a46:	f000 80a7 	beq.w	8001b98 <_vfiprintf_r+0x1ec>
 8001a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a4c:	445a      	add	r2, fp
 8001a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a50:	f89a 3000 	ldrb.w	r3, [sl]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 809f 	beq.w	8001b98 <_vfiprintf_r+0x1ec>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a64:	f10a 0a01 	add.w	sl, sl, #1
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	9307      	str	r3, [sp, #28]
 8001a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a72:	4654      	mov	r4, sl
 8001a74:	2205      	movs	r2, #5
 8001a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a7a:	4853      	ldr	r0, [pc, #332]	@ (8001bc8 <_vfiprintf_r+0x21c>)
 8001a7c:	f7fe fbb0 	bl	80001e0 <memchr>
 8001a80:	9a04      	ldr	r2, [sp, #16]
 8001a82:	b9d8      	cbnz	r0, 8001abc <_vfiprintf_r+0x110>
 8001a84:	06d1      	lsls	r1, r2, #27
 8001a86:	bf44      	itt	mi
 8001a88:	2320      	movmi	r3, #32
 8001a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a8e:	0713      	lsls	r3, r2, #28
 8001a90:	bf44      	itt	mi
 8001a92:	232b      	movmi	r3, #43	@ 0x2b
 8001a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a98:	f89a 3000 	ldrb.w	r3, [sl]
 8001a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a9e:	d015      	beq.n	8001acc <_vfiprintf_r+0x120>
 8001aa0:	9a07      	ldr	r2, [sp, #28]
 8001aa2:	4654      	mov	r4, sl
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f04f 0c0a 	mov.w	ip, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ab0:	3b30      	subs	r3, #48	@ 0x30
 8001ab2:	2b09      	cmp	r3, #9
 8001ab4:	d94b      	bls.n	8001b4e <_vfiprintf_r+0x1a2>
 8001ab6:	b1b0      	cbz	r0, 8001ae6 <_vfiprintf_r+0x13a>
 8001ab8:	9207      	str	r2, [sp, #28]
 8001aba:	e014      	b.n	8001ae6 <_vfiprintf_r+0x13a>
 8001abc:	eba0 0308 	sub.w	r3, r0, r8
 8001ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	46a2      	mov	sl, r4
 8001aca:	e7d2      	b.n	8001a72 <_vfiprintf_r+0xc6>
 8001acc:	9b03      	ldr	r3, [sp, #12]
 8001ace:	1d19      	adds	r1, r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	9103      	str	r1, [sp, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bfbb      	ittet	lt
 8001ad8:	425b      	neglt	r3, r3
 8001ada:	f042 0202 	orrlt.w	r2, r2, #2
 8001ade:	9307      	strge	r3, [sp, #28]
 8001ae0:	9307      	strlt	r3, [sp, #28]
 8001ae2:	bfb8      	it	lt
 8001ae4:	9204      	strlt	r2, [sp, #16]
 8001ae6:	7823      	ldrb	r3, [r4, #0]
 8001ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aea:	d10a      	bne.n	8001b02 <_vfiprintf_r+0x156>
 8001aec:	7863      	ldrb	r3, [r4, #1]
 8001aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8001af0:	d132      	bne.n	8001b58 <_vfiprintf_r+0x1ac>
 8001af2:	9b03      	ldr	r3, [sp, #12]
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	9203      	str	r2, [sp, #12]
 8001afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001afe:	3402      	adds	r4, #2
 8001b00:	9305      	str	r3, [sp, #20]
 8001b02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001bcc <_vfiprintf_r+0x220>
 8001b06:	7821      	ldrb	r1, [r4, #0]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4650      	mov	r0, sl
 8001b0c:	f7fe fb68 	bl	80001e0 <memchr>
 8001b10:	b138      	cbz	r0, 8001b22 <_vfiprintf_r+0x176>
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	eba0 000a 	sub.w	r0, r0, sl
 8001b18:	2240      	movs	r2, #64	@ 0x40
 8001b1a:	4082      	lsls	r2, r0
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	3401      	adds	r4, #1
 8001b20:	9304      	str	r3, [sp, #16]
 8001b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b26:	482a      	ldr	r0, [pc, #168]	@ (8001bd0 <_vfiprintf_r+0x224>)
 8001b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	f7fe fb57 	bl	80001e0 <memchr>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d03f      	beq.n	8001bb6 <_vfiprintf_r+0x20a>
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <_vfiprintf_r+0x228>)
 8001b38:	bb1b      	cbnz	r3, 8001b82 <_vfiprintf_r+0x1d6>
 8001b3a:	9b03      	ldr	r3, [sp, #12]
 8001b3c:	3307      	adds	r3, #7
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	3308      	adds	r3, #8
 8001b44:	9303      	str	r3, [sp, #12]
 8001b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b48:	443b      	add	r3, r7
 8001b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b4c:	e76a      	b.n	8001a24 <_vfiprintf_r+0x78>
 8001b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b52:	460c      	mov	r4, r1
 8001b54:	2001      	movs	r0, #1
 8001b56:	e7a8      	b.n	8001aaa <_vfiprintf_r+0xfe>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	3401      	adds	r4, #1
 8001b5c:	9305      	str	r3, [sp, #20]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 0c0a 	mov.w	ip, #10
 8001b64:	4620      	mov	r0, r4
 8001b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b6a:	3a30      	subs	r2, #48	@ 0x30
 8001b6c:	2a09      	cmp	r2, #9
 8001b6e:	d903      	bls.n	8001b78 <_vfiprintf_r+0x1cc>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0c6      	beq.n	8001b02 <_vfiprintf_r+0x156>
 8001b74:	9105      	str	r1, [sp, #20]
 8001b76:	e7c4      	b.n	8001b02 <_vfiprintf_r+0x156>
 8001b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e7f0      	b.n	8001b64 <_vfiprintf_r+0x1b8>
 8001b82:	ab03      	add	r3, sp, #12
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	462a      	mov	r2, r5
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <_vfiprintf_r+0x22c>)
 8001b8a:	a904      	add	r1, sp, #16
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4607      	mov	r7, r0
 8001b94:	1c78      	adds	r0, r7, #1
 8001b96:	d1d6      	bne.n	8001b46 <_vfiprintf_r+0x19a>
 8001b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b9a:	07d9      	lsls	r1, r3, #31
 8001b9c:	d405      	bmi.n	8001baa <_vfiprintf_r+0x1fe>
 8001b9e:	89ab      	ldrh	r3, [r5, #12]
 8001ba0:	059a      	lsls	r2, r3, #22
 8001ba2:	d402      	bmi.n	8001baa <_vfiprintf_r+0x1fe>
 8001ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ba6:	f7ff fddf 	bl	8001768 <__retarget_lock_release_recursive>
 8001baa:	89ab      	ldrh	r3, [r5, #12]
 8001bac:	065b      	lsls	r3, r3, #25
 8001bae:	f53f af1f 	bmi.w	80019f0 <_vfiprintf_r+0x44>
 8001bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001bb4:	e71e      	b.n	80019f4 <_vfiprintf_r+0x48>
 8001bb6:	ab03      	add	r3, sp, #12
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	462a      	mov	r2, r5
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <_vfiprintf_r+0x22c>)
 8001bbe:	a904      	add	r1, sp, #16
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f000 f879 	bl	8001cb8 <_printf_i>
 8001bc6:	e7e4      	b.n	8001b92 <_vfiprintf_r+0x1e6>
 8001bc8:	0800223f 	.word	0x0800223f
 8001bcc:	08002245 	.word	0x08002245
 8001bd0:	08002249 	.word	0x08002249
 8001bd4:	00000000 	.word	0x00000000
 8001bd8:	08001987 	.word	0x08001987

08001bdc <_printf_common>:
 8001bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be0:	4616      	mov	r6, r2
 8001be2:	4698      	mov	r8, r3
 8001be4:	688a      	ldr	r2, [r1, #8]
 8001be6:	690b      	ldr	r3, [r1, #16]
 8001be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bfb8      	it	lt
 8001bf0:	4613      	movlt	r3, r2
 8001bf2:	6033      	str	r3, [r6, #0]
 8001bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001bf8:	4607      	mov	r7, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	b10a      	cbz	r2, 8001c02 <_printf_common+0x26>
 8001bfe:	3301      	adds	r3, #1
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	0699      	lsls	r1, r3, #26
 8001c06:	bf42      	ittt	mi
 8001c08:	6833      	ldrmi	r3, [r6, #0]
 8001c0a:	3302      	addmi	r3, #2
 8001c0c:	6033      	strmi	r3, [r6, #0]
 8001c0e:	6825      	ldr	r5, [r4, #0]
 8001c10:	f015 0506 	ands.w	r5, r5, #6
 8001c14:	d106      	bne.n	8001c24 <_printf_common+0x48>
 8001c16:	f104 0a19 	add.w	sl, r4, #25
 8001c1a:	68e3      	ldr	r3, [r4, #12]
 8001c1c:	6832      	ldr	r2, [r6, #0]
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	42ab      	cmp	r3, r5
 8001c22:	dc26      	bgt.n	8001c72 <_printf_common+0x96>
 8001c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	3b00      	subs	r3, #0
 8001c2c:	bf18      	it	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	0692      	lsls	r2, r2, #26
 8001c32:	d42b      	bmi.n	8001c8c <_printf_common+0xb0>
 8001c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c38:	4641      	mov	r1, r8
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	47c8      	blx	r9
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d01e      	beq.n	8001c80 <_printf_common+0xa4>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	6922      	ldr	r2, [r4, #16]
 8001c46:	f003 0306 	and.w	r3, r3, #6
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf02      	ittt	eq
 8001c4e:	68e5      	ldreq	r5, [r4, #12]
 8001c50:	6833      	ldreq	r3, [r6, #0]
 8001c52:	1aed      	subeq	r5, r5, r3
 8001c54:	68a3      	ldr	r3, [r4, #8]
 8001c56:	bf0c      	ite	eq
 8001c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c5c:	2500      	movne	r5, #0
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	bfc4      	itt	gt
 8001c62:	1a9b      	subgt	r3, r3, r2
 8001c64:	18ed      	addgt	r5, r5, r3
 8001c66:	2600      	movs	r6, #0
 8001c68:	341a      	adds	r4, #26
 8001c6a:	42b5      	cmp	r5, r6
 8001c6c:	d11a      	bne.n	8001ca4 <_printf_common+0xc8>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e008      	b.n	8001c84 <_printf_common+0xa8>
 8001c72:	2301      	movs	r3, #1
 8001c74:	4652      	mov	r2, sl
 8001c76:	4641      	mov	r1, r8
 8001c78:	4638      	mov	r0, r7
 8001c7a:	47c8      	blx	r9
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	d103      	bne.n	8001c88 <_printf_common+0xac>
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c88:	3501      	adds	r5, #1
 8001c8a:	e7c6      	b.n	8001c1a <_printf_common+0x3e>
 8001c8c:	18e1      	adds	r1, r4, r3
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	2030      	movs	r0, #48	@ 0x30
 8001c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c96:	4422      	add	r2, r4
 8001c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	e7c7      	b.n	8001c34 <_printf_common+0x58>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	4641      	mov	r1, r8
 8001caa:	4638      	mov	r0, r7
 8001cac:	47c8      	blx	r9
 8001cae:	3001      	adds	r0, #1
 8001cb0:	d0e6      	beq.n	8001c80 <_printf_common+0xa4>
 8001cb2:	3601      	adds	r6, #1
 8001cb4:	e7d9      	b.n	8001c6a <_printf_common+0x8e>
	...

08001cb8 <_printf_i>:
 8001cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cbc:	7e0f      	ldrb	r7, [r1, #24]
 8001cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cc0:	2f78      	cmp	r7, #120	@ 0x78
 8001cc2:	4691      	mov	r9, r2
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	469a      	mov	sl, r3
 8001cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cce:	d807      	bhi.n	8001ce0 <_printf_i+0x28>
 8001cd0:	2f62      	cmp	r7, #98	@ 0x62
 8001cd2:	d80a      	bhi.n	8001cea <_printf_i+0x32>
 8001cd4:	2f00      	cmp	r7, #0
 8001cd6:	f000 80d2 	beq.w	8001e7e <_printf_i+0x1c6>
 8001cda:	2f58      	cmp	r7, #88	@ 0x58
 8001cdc:	f000 80b9 	beq.w	8001e52 <_printf_i+0x19a>
 8001ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ce8:	e03a      	b.n	8001d60 <_printf_i+0xa8>
 8001cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001cee:	2b15      	cmp	r3, #21
 8001cf0:	d8f6      	bhi.n	8001ce0 <_printf_i+0x28>
 8001cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8001cf8 <_printf_i+0x40>)
 8001cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cf8:	08001d51 	.word	0x08001d51
 8001cfc:	08001d65 	.word	0x08001d65
 8001d00:	08001ce1 	.word	0x08001ce1
 8001d04:	08001ce1 	.word	0x08001ce1
 8001d08:	08001ce1 	.word	0x08001ce1
 8001d0c:	08001ce1 	.word	0x08001ce1
 8001d10:	08001d65 	.word	0x08001d65
 8001d14:	08001ce1 	.word	0x08001ce1
 8001d18:	08001ce1 	.word	0x08001ce1
 8001d1c:	08001ce1 	.word	0x08001ce1
 8001d20:	08001ce1 	.word	0x08001ce1
 8001d24:	08001e65 	.word	0x08001e65
 8001d28:	08001d8f 	.word	0x08001d8f
 8001d2c:	08001e1f 	.word	0x08001e1f
 8001d30:	08001ce1 	.word	0x08001ce1
 8001d34:	08001ce1 	.word	0x08001ce1
 8001d38:	08001e87 	.word	0x08001e87
 8001d3c:	08001ce1 	.word	0x08001ce1
 8001d40:	08001d8f 	.word	0x08001d8f
 8001d44:	08001ce1 	.word	0x08001ce1
 8001d48:	08001ce1 	.word	0x08001ce1
 8001d4c:	08001e27 	.word	0x08001e27
 8001d50:	6833      	ldr	r3, [r6, #0]
 8001d52:	1d1a      	adds	r2, r3, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6032      	str	r2, [r6, #0]
 8001d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d60:	2301      	movs	r3, #1
 8001d62:	e09d      	b.n	8001ea0 <_printf_i+0x1e8>
 8001d64:	6833      	ldr	r3, [r6, #0]
 8001d66:	6820      	ldr	r0, [r4, #0]
 8001d68:	1d19      	adds	r1, r3, #4
 8001d6a:	6031      	str	r1, [r6, #0]
 8001d6c:	0606      	lsls	r6, r0, #24
 8001d6e:	d501      	bpl.n	8001d74 <_printf_i+0xbc>
 8001d70:	681d      	ldr	r5, [r3, #0]
 8001d72:	e003      	b.n	8001d7c <_printf_i+0xc4>
 8001d74:	0645      	lsls	r5, r0, #25
 8001d76:	d5fb      	bpl.n	8001d70 <_printf_i+0xb8>
 8001d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	da03      	bge.n	8001d88 <_printf_i+0xd0>
 8001d80:	232d      	movs	r3, #45	@ 0x2d
 8001d82:	426d      	negs	r5, r5
 8001d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d88:	4859      	ldr	r0, [pc, #356]	@ (8001ef0 <_printf_i+0x238>)
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	e011      	b.n	8001db2 <_printf_i+0xfa>
 8001d8e:	6821      	ldr	r1, [r4, #0]
 8001d90:	6833      	ldr	r3, [r6, #0]
 8001d92:	0608      	lsls	r0, r1, #24
 8001d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d98:	d402      	bmi.n	8001da0 <_printf_i+0xe8>
 8001d9a:	0649      	lsls	r1, r1, #25
 8001d9c:	bf48      	it	mi
 8001d9e:	b2ad      	uxthmi	r5, r5
 8001da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001da2:	4853      	ldr	r0, [pc, #332]	@ (8001ef0 <_printf_i+0x238>)
 8001da4:	6033      	str	r3, [r6, #0]
 8001da6:	bf14      	ite	ne
 8001da8:	230a      	movne	r3, #10
 8001daa:	2308      	moveq	r3, #8
 8001dac:	2100      	movs	r1, #0
 8001dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001db2:	6866      	ldr	r6, [r4, #4]
 8001db4:	60a6      	str	r6, [r4, #8]
 8001db6:	2e00      	cmp	r6, #0
 8001db8:	bfa2      	ittt	ge
 8001dba:	6821      	ldrge	r1, [r4, #0]
 8001dbc:	f021 0104 	bicge.w	r1, r1, #4
 8001dc0:	6021      	strge	r1, [r4, #0]
 8001dc2:	b90d      	cbnz	r5, 8001dc8 <_printf_i+0x110>
 8001dc4:	2e00      	cmp	r6, #0
 8001dc6:	d04b      	beq.n	8001e60 <_printf_i+0x1a8>
 8001dc8:	4616      	mov	r6, r2
 8001dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8001dce:	fb03 5711 	mls	r7, r3, r1, r5
 8001dd2:	5dc7      	ldrb	r7, [r0, r7]
 8001dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001dd8:	462f      	mov	r7, r5
 8001dda:	42bb      	cmp	r3, r7
 8001ddc:	460d      	mov	r5, r1
 8001dde:	d9f4      	bls.n	8001dca <_printf_i+0x112>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d10b      	bne.n	8001dfc <_printf_i+0x144>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	07df      	lsls	r7, r3, #31
 8001de8:	d508      	bpl.n	8001dfc <_printf_i+0x144>
 8001dea:	6923      	ldr	r3, [r4, #16]
 8001dec:	6861      	ldr	r1, [r4, #4]
 8001dee:	4299      	cmp	r1, r3
 8001df0:	bfde      	ittt	le
 8001df2:	2330      	movle	r3, #48	@ 0x30
 8001df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001df8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001dfc:	1b92      	subs	r2, r2, r6
 8001dfe:	6122      	str	r2, [r4, #16]
 8001e00:	f8cd a000 	str.w	sl, [sp]
 8001e04:	464b      	mov	r3, r9
 8001e06:	aa03      	add	r2, sp, #12
 8001e08:	4621      	mov	r1, r4
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	f7ff fee6 	bl	8001bdc <_printf_common>
 8001e10:	3001      	adds	r0, #1
 8001e12:	d14a      	bne.n	8001eaa <_printf_i+0x1f2>
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	b004      	add	sp, #16
 8001e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f043 0320 	orr.w	r3, r3, #32
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	4833      	ldr	r0, [pc, #204]	@ (8001ef4 <_printf_i+0x23c>)
 8001e28:	2778      	movs	r7, #120	@ 0x78
 8001e2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	6831      	ldr	r1, [r6, #0]
 8001e32:	061f      	lsls	r7, r3, #24
 8001e34:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e38:	d402      	bmi.n	8001e40 <_printf_i+0x188>
 8001e3a:	065f      	lsls	r7, r3, #25
 8001e3c:	bf48      	it	mi
 8001e3e:	b2ad      	uxthmi	r5, r5
 8001e40:	6031      	str	r1, [r6, #0]
 8001e42:	07d9      	lsls	r1, r3, #31
 8001e44:	bf44      	itt	mi
 8001e46:	f043 0320 	orrmi.w	r3, r3, #32
 8001e4a:	6023      	strmi	r3, [r4, #0]
 8001e4c:	b11d      	cbz	r5, 8001e56 <_printf_i+0x19e>
 8001e4e:	2310      	movs	r3, #16
 8001e50:	e7ac      	b.n	8001dac <_printf_i+0xf4>
 8001e52:	4827      	ldr	r0, [pc, #156]	@ (8001ef0 <_printf_i+0x238>)
 8001e54:	e7e9      	b.n	8001e2a <_printf_i+0x172>
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	f023 0320 	bic.w	r3, r3, #32
 8001e5c:	6023      	str	r3, [r4, #0]
 8001e5e:	e7f6      	b.n	8001e4e <_printf_i+0x196>
 8001e60:	4616      	mov	r6, r2
 8001e62:	e7bd      	b.n	8001de0 <_printf_i+0x128>
 8001e64:	6833      	ldr	r3, [r6, #0]
 8001e66:	6825      	ldr	r5, [r4, #0]
 8001e68:	6961      	ldr	r1, [r4, #20]
 8001e6a:	1d18      	adds	r0, r3, #4
 8001e6c:	6030      	str	r0, [r6, #0]
 8001e6e:	062e      	lsls	r6, r5, #24
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	d501      	bpl.n	8001e78 <_printf_i+0x1c0>
 8001e74:	6019      	str	r1, [r3, #0]
 8001e76:	e002      	b.n	8001e7e <_printf_i+0x1c6>
 8001e78:	0668      	lsls	r0, r5, #25
 8001e7a:	d5fb      	bpl.n	8001e74 <_printf_i+0x1bc>
 8001e7c:	8019      	strh	r1, [r3, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	6123      	str	r3, [r4, #16]
 8001e82:	4616      	mov	r6, r2
 8001e84:	e7bc      	b.n	8001e00 <_printf_i+0x148>
 8001e86:	6833      	ldr	r3, [r6, #0]
 8001e88:	1d1a      	adds	r2, r3, #4
 8001e8a:	6032      	str	r2, [r6, #0]
 8001e8c:	681e      	ldr	r6, [r3, #0]
 8001e8e:	6862      	ldr	r2, [r4, #4]
 8001e90:	2100      	movs	r1, #0
 8001e92:	4630      	mov	r0, r6
 8001e94:	f7fe f9a4 	bl	80001e0 <memchr>
 8001e98:	b108      	cbz	r0, 8001e9e <_printf_i+0x1e6>
 8001e9a:	1b80      	subs	r0, r0, r6
 8001e9c:	6060      	str	r0, [r4, #4]
 8001e9e:	6863      	ldr	r3, [r4, #4]
 8001ea0:	6123      	str	r3, [r4, #16]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ea8:	e7aa      	b.n	8001e00 <_printf_i+0x148>
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	4632      	mov	r2, r6
 8001eae:	4649      	mov	r1, r9
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	47d0      	blx	sl
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d0ad      	beq.n	8001e14 <_printf_i+0x15c>
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	079b      	lsls	r3, r3, #30
 8001ebc:	d413      	bmi.n	8001ee6 <_printf_i+0x22e>
 8001ebe:	68e0      	ldr	r0, [r4, #12]
 8001ec0:	9b03      	ldr	r3, [sp, #12]
 8001ec2:	4298      	cmp	r0, r3
 8001ec4:	bfb8      	it	lt
 8001ec6:	4618      	movlt	r0, r3
 8001ec8:	e7a6      	b.n	8001e18 <_printf_i+0x160>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4632      	mov	r2, r6
 8001ece:	4649      	mov	r1, r9
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	47d0      	blx	sl
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d09d      	beq.n	8001e14 <_printf_i+0x15c>
 8001ed8:	3501      	adds	r5, #1
 8001eda:	68e3      	ldr	r3, [r4, #12]
 8001edc:	9903      	ldr	r1, [sp, #12]
 8001ede:	1a5b      	subs	r3, r3, r1
 8001ee0:	42ab      	cmp	r3, r5
 8001ee2:	dcf2      	bgt.n	8001eca <_printf_i+0x212>
 8001ee4:	e7eb      	b.n	8001ebe <_printf_i+0x206>
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	f104 0619 	add.w	r6, r4, #25
 8001eec:	e7f5      	b.n	8001eda <_printf_i+0x222>
 8001eee:	bf00      	nop
 8001ef0:	08002250 	.word	0x08002250
 8001ef4:	08002261 	.word	0x08002261

08001ef8 <__sflush_r>:
 8001ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	0716      	lsls	r6, r2, #28
 8001f00:	4605      	mov	r5, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	d454      	bmi.n	8001fb0 <__sflush_r+0xb8>
 8001f06:	684b      	ldr	r3, [r1, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dc02      	bgt.n	8001f12 <__sflush_r+0x1a>
 8001f0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dd48      	ble.n	8001fa4 <__sflush_r+0xac>
 8001f12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f14:	2e00      	cmp	r6, #0
 8001f16:	d045      	beq.n	8001fa4 <__sflush_r+0xac>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001f1e:	682f      	ldr	r7, [r5, #0]
 8001f20:	6a21      	ldr	r1, [r4, #32]
 8001f22:	602b      	str	r3, [r5, #0]
 8001f24:	d030      	beq.n	8001f88 <__sflush_r+0x90>
 8001f26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	0759      	lsls	r1, r3, #29
 8001f2c:	d505      	bpl.n	8001f3a <__sflush_r+0x42>
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	1ad2      	subs	r2, r2, r3
 8001f32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001f34:	b10b      	cbz	r3, 8001f3a <__sflush_r+0x42>
 8001f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f38:	1ad2      	subs	r2, r2, r3
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f3e:	6a21      	ldr	r1, [r4, #32]
 8001f40:	4628      	mov	r0, r5
 8001f42:	47b0      	blx	r6
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	d106      	bne.n	8001f58 <__sflush_r+0x60>
 8001f4a:	6829      	ldr	r1, [r5, #0]
 8001f4c:	291d      	cmp	r1, #29
 8001f4e:	d82b      	bhi.n	8001fa8 <__sflush_r+0xb0>
 8001f50:	4a28      	ldr	r2, [pc, #160]	@ (8001ff4 <__sflush_r+0xfc>)
 8001f52:	410a      	asrs	r2, r1
 8001f54:	07d6      	lsls	r6, r2, #31
 8001f56:	d427      	bmi.n	8001fa8 <__sflush_r+0xb0>
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6062      	str	r2, [r4, #4]
 8001f5c:	04d9      	lsls	r1, r3, #19
 8001f5e:	6922      	ldr	r2, [r4, #16]
 8001f60:	6022      	str	r2, [r4, #0]
 8001f62:	d504      	bpl.n	8001f6e <__sflush_r+0x76>
 8001f64:	1c42      	adds	r2, r0, #1
 8001f66:	d101      	bne.n	8001f6c <__sflush_r+0x74>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b903      	cbnz	r3, 8001f6e <__sflush_r+0x76>
 8001f6c:	6560      	str	r0, [r4, #84]	@ 0x54
 8001f6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f70:	602f      	str	r7, [r5, #0]
 8001f72:	b1b9      	cbz	r1, 8001fa4 <__sflush_r+0xac>
 8001f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f78:	4299      	cmp	r1, r3
 8001f7a:	d002      	beq.n	8001f82 <__sflush_r+0x8a>
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f7ff fbf5 	bl	800176c <_free_r>
 8001f82:	2300      	movs	r3, #0
 8001f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f86:	e00d      	b.n	8001fa4 <__sflush_r+0xac>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	47b0      	blx	r6
 8001f8e:	4602      	mov	r2, r0
 8001f90:	1c50      	adds	r0, r2, #1
 8001f92:	d1c9      	bne.n	8001f28 <__sflush_r+0x30>
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0c6      	beq.n	8001f28 <__sflush_r+0x30>
 8001f9a:	2b1d      	cmp	r3, #29
 8001f9c:	d001      	beq.n	8001fa2 <__sflush_r+0xaa>
 8001f9e:	2b16      	cmp	r3, #22
 8001fa0:	d11d      	bne.n	8001fde <__sflush_r+0xe6>
 8001fa2:	602f      	str	r7, [r5, #0]
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e021      	b.n	8001fec <__sflush_r+0xf4>
 8001fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	e01a      	b.n	8001fe6 <__sflush_r+0xee>
 8001fb0:	690f      	ldr	r7, [r1, #16]
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d0f6      	beq.n	8001fa4 <__sflush_r+0xac>
 8001fb6:	0793      	lsls	r3, r2, #30
 8001fb8:	680e      	ldr	r6, [r1, #0]
 8001fba:	bf08      	it	eq
 8001fbc:	694b      	ldreq	r3, [r1, #20]
 8001fbe:	600f      	str	r7, [r1, #0]
 8001fc0:	bf18      	it	ne
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	1bf6      	subs	r6, r6, r7
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	2e00      	cmp	r6, #0
 8001fca:	ddeb      	ble.n	8001fa4 <__sflush_r+0xac>
 8001fcc:	6a21      	ldr	r1, [r4, #32]
 8001fce:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001fd2:	4633      	mov	r3, r6
 8001fd4:	463a      	mov	r2, r7
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	47e0      	blx	ip
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	dc07      	bgt.n	8001fee <__sflush_r+0xf6>
 8001fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fee:	4407      	add	r7, r0
 8001ff0:	1a36      	subs	r6, r6, r0
 8001ff2:	e7e9      	b.n	8001fc8 <__sflush_r+0xd0>
 8001ff4:	dfbffffe 	.word	0xdfbffffe

08001ff8 <_fflush_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	690b      	ldr	r3, [r1, #16]
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	b913      	cbnz	r3, 8002008 <_fflush_r+0x10>
 8002002:	2500      	movs	r5, #0
 8002004:	4628      	mov	r0, r5
 8002006:	bd38      	pop	{r3, r4, r5, pc}
 8002008:	b118      	cbz	r0, 8002012 <_fflush_r+0x1a>
 800200a:	6a03      	ldr	r3, [r0, #32]
 800200c:	b90b      	cbnz	r3, 8002012 <_fflush_r+0x1a>
 800200e:	f7ff f9b3 	bl	8001378 <__sinit>
 8002012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f3      	beq.n	8002002 <_fflush_r+0xa>
 800201a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800201c:	07d0      	lsls	r0, r2, #31
 800201e:	d404      	bmi.n	800202a <_fflush_r+0x32>
 8002020:	0599      	lsls	r1, r3, #22
 8002022:	d402      	bmi.n	800202a <_fflush_r+0x32>
 8002024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002026:	f7ff fb9e 	bl	8001766 <__retarget_lock_acquire_recursive>
 800202a:	4628      	mov	r0, r5
 800202c:	4621      	mov	r1, r4
 800202e:	f7ff ff63 	bl	8001ef8 <__sflush_r>
 8002032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002034:	07da      	lsls	r2, r3, #31
 8002036:	4605      	mov	r5, r0
 8002038:	d4e4      	bmi.n	8002004 <_fflush_r+0xc>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	059b      	lsls	r3, r3, #22
 800203e:	d4e1      	bmi.n	8002004 <_fflush_r+0xc>
 8002040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002042:	f7ff fb91 	bl	8001768 <__retarget_lock_release_recursive>
 8002046:	e7dd      	b.n	8002004 <_fflush_r+0xc>

08002048 <__swhatbuf_r>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	460c      	mov	r4, r1
 800204c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002050:	2900      	cmp	r1, #0
 8002052:	b096      	sub	sp, #88	@ 0x58
 8002054:	4615      	mov	r5, r2
 8002056:	461e      	mov	r6, r3
 8002058:	da0d      	bge.n	8002076 <__swhatbuf_r+0x2e>
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	bf14      	ite	ne
 8002066:	2340      	movne	r3, #64	@ 0x40
 8002068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800206c:	2000      	movs	r0, #0
 800206e:	6031      	str	r1, [r6, #0]
 8002070:	602b      	str	r3, [r5, #0]
 8002072:	b016      	add	sp, #88	@ 0x58
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	466a      	mov	r2, sp
 8002078:	f000 f848 	bl	800210c <_fstat_r>
 800207c:	2800      	cmp	r0, #0
 800207e:	dbec      	blt.n	800205a <__swhatbuf_r+0x12>
 8002080:	9901      	ldr	r1, [sp, #4]
 8002082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800208a:	4259      	negs	r1, r3
 800208c:	4159      	adcs	r1, r3
 800208e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002092:	e7eb      	b.n	800206c <__swhatbuf_r+0x24>

08002094 <__smakebuf_r>:
 8002094:	898b      	ldrh	r3, [r1, #12]
 8002096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002098:	079d      	lsls	r5, r3, #30
 800209a:	4606      	mov	r6, r0
 800209c:	460c      	mov	r4, r1
 800209e:	d507      	bpl.n	80020b0 <__smakebuf_r+0x1c>
 80020a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	6123      	str	r3, [r4, #16]
 80020a8:	2301      	movs	r3, #1
 80020aa:	6163      	str	r3, [r4, #20]
 80020ac:	b003      	add	sp, #12
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b0:	ab01      	add	r3, sp, #4
 80020b2:	466a      	mov	r2, sp
 80020b4:	f7ff ffc8 	bl	8002048 <__swhatbuf_r>
 80020b8:	9f00      	ldr	r7, [sp, #0]
 80020ba:	4605      	mov	r5, r0
 80020bc:	4639      	mov	r1, r7
 80020be:	4630      	mov	r0, r6
 80020c0:	f7ff fbc0 	bl	8001844 <_malloc_r>
 80020c4:	b948      	cbnz	r0, 80020da <__smakebuf_r+0x46>
 80020c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ca:	059a      	lsls	r2, r3, #22
 80020cc:	d4ee      	bmi.n	80020ac <__smakebuf_r+0x18>
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	81a3      	strh	r3, [r4, #12]
 80020d8:	e7e2      	b.n	80020a0 <__smakebuf_r+0xc>
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	6020      	str	r0, [r4, #0]
 80020de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e2:	81a3      	strh	r3, [r4, #12]
 80020e4:	9b01      	ldr	r3, [sp, #4]
 80020e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80020ea:	b15b      	cbz	r3, 8002104 <__smakebuf_r+0x70>
 80020ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020f0:	4630      	mov	r0, r6
 80020f2:	f000 f81d 	bl	8002130 <_isatty_r>
 80020f6:	b128      	cbz	r0, 8002104 <__smakebuf_r+0x70>
 80020f8:	89a3      	ldrh	r3, [r4, #12]
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	81a3      	strh	r3, [r4, #12]
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	431d      	orrs	r5, r3
 8002108:	81a5      	strh	r5, [r4, #12]
 800210a:	e7cf      	b.n	80020ac <__smakebuf_r+0x18>

0800210c <_fstat_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4d07      	ldr	r5, [pc, #28]	@ (800212c <_fstat_r+0x20>)
 8002110:	2300      	movs	r3, #0
 8002112:	4604      	mov	r4, r0
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	602b      	str	r3, [r5, #0]
 800211a:	f7fe fbff 	bl	800091c <_fstat>
 800211e:	1c43      	adds	r3, r0, #1
 8002120:	d102      	bne.n	8002128 <_fstat_r+0x1c>
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	b103      	cbz	r3, 8002128 <_fstat_r+0x1c>
 8002126:	6023      	str	r3, [r4, #0]
 8002128:	bd38      	pop	{r3, r4, r5, pc}
 800212a:	bf00      	nop
 800212c:	200001b8 	.word	0x200001b8

08002130 <_isatty_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4d06      	ldr	r5, [pc, #24]	@ (800214c <_isatty_r+0x1c>)
 8002134:	2300      	movs	r3, #0
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	602b      	str	r3, [r5, #0]
 800213c:	f7fe fbfd 	bl	800093a <_isatty>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_isatty_r+0x1a>
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	b103      	cbz	r3, 800214a <_isatty_r+0x1a>
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	200001b8 	.word	0x200001b8

08002150 <_sbrk_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4d06      	ldr	r5, [pc, #24]	@ (800216c <_sbrk_r+0x1c>)
 8002154:	2300      	movs	r3, #0
 8002156:	4604      	mov	r4, r0
 8002158:	4608      	mov	r0, r1
 800215a:	602b      	str	r3, [r5, #0]
 800215c:	f7fe fc04 	bl	8000968 <_sbrk>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d102      	bne.n	800216a <_sbrk_r+0x1a>
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	b103      	cbz	r3, 800216a <_sbrk_r+0x1a>
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	200001b8 	.word	0x200001b8

08002170 <_init>:
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002172:	bf00      	nop
 8002174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002176:	bc08      	pop	{r3}
 8002178:	469e      	mov	lr, r3
 800217a:	4770      	bx	lr

0800217c <_fini>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr
